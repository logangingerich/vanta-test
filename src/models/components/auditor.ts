/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Auditor = {
  id: string;
  /**
   * The unique identifier for the organization.
   */
  organizationId: string;
  /**
   * The email address of the auditor.
   */
  email: string;
  /**
   * The given name (first name) of the auditor.
   */
  givenName: string;
  /**
   * The family name (last name) of the auditor.
   */
  familyName: string;
};

/** @internal */
export const Auditor$inboundSchema: z.ZodType<Auditor, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    organizationId: z.string(),
    email: z.string(),
    givenName: z.string(),
    familyName: z.string(),
  });

/** @internal */
export type Auditor$Outbound = {
  id: string;
  organizationId: string;
  email: string;
  givenName: string;
  familyName: string;
};

/** @internal */
export const Auditor$outboundSchema: z.ZodType<
  Auditor$Outbound,
  z.ZodTypeDef,
  Auditor
> = z.object({
  id: z.string(),
  organizationId: z.string(),
  email: z.string(),
  givenName: z.string(),
  familyName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Auditor$ {
  /** @deprecated use `Auditor$inboundSchema` instead. */
  export const inboundSchema = Auditor$inboundSchema;
  /** @deprecated use `Auditor$outboundSchema` instead. */
  export const outboundSchema = Auditor$outboundSchema;
  /** @deprecated use `Auditor$Outbound` instead. */
  export type Outbound = Auditor$Outbound;
}

export function auditorToJSON(auditor: Auditor): string {
  return JSON.stringify(Auditor$outboundSchema.parse(auditor));
}

export function auditorFromJSON(
  jsonString: string,
): SafeParseResult<Auditor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Auditor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Auditor' from JSON`,
  );
}
