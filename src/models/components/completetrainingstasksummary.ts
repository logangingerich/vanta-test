/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskStatus,
  TaskStatus$inboundSchema,
  TaskStatus$outboundSchema,
} from "./taskstatus.js";
import {
  TaskTypeCOMPLETETRAININGS,
  TaskTypeCOMPLETETRAININGS$inboundSchema,
  TaskTypeCOMPLETETRAININGS$outboundSchema,
} from "./tasktypecompletetrainings.js";
import {
  Training,
  Training$inboundSchema,
  Training$Outbound,
  Training$outboundSchema,
} from "./training.js";

/**
 * If the task is disabled, the reason and date when it was disabled.
 */
export type Disabled = {
  date: Date;
  reason: string | null;
};

/**
 * Task summary for completing all trainings.
 */
export type CompleteTrainingsTaskSummary = {
  taskType: TaskTypeCOMPLETETRAININGS;
  /**
   * The status of a task.
   *
   * @remarks
   * - COMPLETE: The task has been completed.
   * - DUE_SOON: The task is due soon.
   * - OVERDUE: The task is overdue.
   * - NONE: The task is not assigned.
   */
  status: TaskStatus;
  /**
   * The due date of the task.
   */
  dueDate: Date | null;
  /**
   * The date the task was completed.
   */
  completionDate: Date | null;
  /**
   * If the task is disabled, the reason and date when it was disabled.
   */
  disabled: Disabled | null;
  /**
   * Incomplete security trainings that are relevant given a person's requirements.
   */
  incompleteTrainings: Array<Training>;
  /**
   * Security trainings that have been completed and are relevant given a person's current requirements.
   */
  completedTrainings: Array<Training>;
};

/** @internal */
export const Disabled$inboundSchema: z.ZodType<
  Disabled,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  reason: z.nullable(z.string()),
});

/** @internal */
export type Disabled$Outbound = {
  date: string;
  reason: string | null;
};

/** @internal */
export const Disabled$outboundSchema: z.ZodType<
  Disabled$Outbound,
  z.ZodTypeDef,
  Disabled
> = z.object({
  date: z.date().transform(v => v.toISOString()),
  reason: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Disabled$ {
  /** @deprecated use `Disabled$inboundSchema` instead. */
  export const inboundSchema = Disabled$inboundSchema;
  /** @deprecated use `Disabled$outboundSchema` instead. */
  export const outboundSchema = Disabled$outboundSchema;
  /** @deprecated use `Disabled$Outbound` instead. */
  export type Outbound = Disabled$Outbound;
}

export function disabledToJSON(disabled: Disabled): string {
  return JSON.stringify(Disabled$outboundSchema.parse(disabled));
}

export function disabledFromJSON(
  jsonString: string,
): SafeParseResult<Disabled, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Disabled$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Disabled' from JSON`,
  );
}

/** @internal */
export const CompleteTrainingsTaskSummary$inboundSchema: z.ZodType<
  CompleteTrainingsTaskSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  taskType: TaskTypeCOMPLETETRAININGS$inboundSchema,
  status: TaskStatus$inboundSchema,
  dueDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  completionDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  disabled: z.nullable(z.lazy(() => Disabled$inboundSchema)),
  incompleteTrainings: z.array(Training$inboundSchema),
  completedTrainings: z.array(Training$inboundSchema),
});

/** @internal */
export type CompleteTrainingsTaskSummary$Outbound = {
  taskType: string;
  status: string;
  dueDate: string | null;
  completionDate: string | null;
  disabled: Disabled$Outbound | null;
  incompleteTrainings: Array<Training$Outbound>;
  completedTrainings: Array<Training$Outbound>;
};

/** @internal */
export const CompleteTrainingsTaskSummary$outboundSchema: z.ZodType<
  CompleteTrainingsTaskSummary$Outbound,
  z.ZodTypeDef,
  CompleteTrainingsTaskSummary
> = z.object({
  taskType: TaskTypeCOMPLETETRAININGS$outboundSchema,
  status: TaskStatus$outboundSchema,
  dueDate: z.nullable(z.date().transform(v => v.toISOString())),
  completionDate: z.nullable(z.date().transform(v => v.toISOString())),
  disabled: z.nullable(z.lazy(() => Disabled$outboundSchema)),
  incompleteTrainings: z.array(Training$outboundSchema),
  completedTrainings: z.array(Training$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteTrainingsTaskSummary$ {
  /** @deprecated use `CompleteTrainingsTaskSummary$inboundSchema` instead. */
  export const inboundSchema = CompleteTrainingsTaskSummary$inboundSchema;
  /** @deprecated use `CompleteTrainingsTaskSummary$outboundSchema` instead. */
  export const outboundSchema = CompleteTrainingsTaskSummary$outboundSchema;
  /** @deprecated use `CompleteTrainingsTaskSummary$Outbound` instead. */
  export type Outbound = CompleteTrainingsTaskSummary$Outbound;
}

export function completeTrainingsTaskSummaryToJSON(
  completeTrainingsTaskSummary: CompleteTrainingsTaskSummary,
): string {
  return JSON.stringify(
    CompleteTrainingsTaskSummary$outboundSchema.parse(
      completeTrainingsTaskSummary,
    ),
  );
}

export function completeTrainingsTaskSummaryFromJSON(
  jsonString: string,
): SafeParseResult<CompleteTrainingsTaskSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompleteTrainingsTaskSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteTrainingsTaskSummary' from JSON`,
  );
}
