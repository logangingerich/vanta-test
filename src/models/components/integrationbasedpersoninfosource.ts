/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PersonInfoSourceTypeINTEGRATION,
  PersonInfoSourceTypeINTEGRATION$inboundSchema,
  PersonInfoSourceTypeINTEGRATION$outboundSchema,
} from "./personinfosourcetypeintegration.js";

/**
 * The person's information comes from an integration.
 */
export type IntegrationBasedPersonInfoSource = {
  integrationId: string;
  resourceId: string | null;
  type: PersonInfoSourceTypeINTEGRATION;
};

/** @internal */
export const IntegrationBasedPersonInfoSource$inboundSchema: z.ZodType<
  IntegrationBasedPersonInfoSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationId: z.string(),
  resourceId: z.nullable(z.string()),
  type: PersonInfoSourceTypeINTEGRATION$inboundSchema,
});

/** @internal */
export type IntegrationBasedPersonInfoSource$Outbound = {
  integrationId: string;
  resourceId: string | null;
  type: string;
};

/** @internal */
export const IntegrationBasedPersonInfoSource$outboundSchema: z.ZodType<
  IntegrationBasedPersonInfoSource$Outbound,
  z.ZodTypeDef,
  IntegrationBasedPersonInfoSource
> = z.object({
  integrationId: z.string(),
  resourceId: z.nullable(z.string()),
  type: PersonInfoSourceTypeINTEGRATION$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationBasedPersonInfoSource$ {
  /** @deprecated use `IntegrationBasedPersonInfoSource$inboundSchema` instead. */
  export const inboundSchema = IntegrationBasedPersonInfoSource$inboundSchema;
  /** @deprecated use `IntegrationBasedPersonInfoSource$outboundSchema` instead. */
  export const outboundSchema = IntegrationBasedPersonInfoSource$outboundSchema;
  /** @deprecated use `IntegrationBasedPersonInfoSource$Outbound` instead. */
  export type Outbound = IntegrationBasedPersonInfoSource$Outbound;
}

export function integrationBasedPersonInfoSourceToJSON(
  integrationBasedPersonInfoSource: IntegrationBasedPersonInfoSource,
): string {
  return JSON.stringify(
    IntegrationBasedPersonInfoSource$outboundSchema.parse(
      integrationBasedPersonInfoSource,
    ),
  );
}

export function integrationBasedPersonInfoSourceFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationBasedPersonInfoSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationBasedPersonInfoSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationBasedPersonInfoSource' from JSON`,
  );
}
