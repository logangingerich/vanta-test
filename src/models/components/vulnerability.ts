/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VulnerabilityType,
  VulnerabilityType$inboundSchema,
  VulnerabilityType$outboundSchema,
} from "./vulnerabilitytype.js";
import {
  VulnSeverityType,
  VulnSeverityType$inboundSchema,
  VulnSeverityType$outboundSchema,
} from "./vulnseveritytype.js";

/**
 * Metadata for the deactivation of the vulnerability.
 */
export type DeactivateMetadata = {
  /**
   * Whether the vulnerability is deactivated indefinitely.
   */
  isVulnDeactivatedIndefinitely: boolean;
  /**
   * Date when the vulnerability will be reactivated.
   */
  deactivatedUntilDate: Date | null;
  /**
   * Reason for deactivating the vulnerability.
   */
  deactivationReason: string;
  /**
   * Date when the vulnerability was deactivated.
   */
  deactivatedOnDate: Date;
  /**
   * Identifier of the user who deactivated the vulnerability.
   */
  deactivatedBy: string;
};

export type Vulnerability = {
  /**
   * Unique identifier for the vulnerability.
   */
  id: string;
  /**
   * Display name of the vulnerability.
   */
  name: string;
  /**
   * Description of the vulnerability.
   */
  description: string;
  /**
   * Integration that the vulnerability is scanned by.
   */
  integrationId: string;
  /**
   * Identifier for the package that the vulnerability is found on.
   *
   * @remarks
   * Only relevant to vulnerabilities of type COMMON or GROUPED.
   */
  packageIdentifier: string | null;
  vulnerabilityType: VulnerabilityType;
  /**
   * Unique identifier for the underlying resource that the vulnerability is found on.
   */
  targetId: string;
  /**
   * Date when the vulnerability was first detected by Vanta.
   */
  firstDetectedDate: Date;
  /**
   * Date when the vulnerability was first detected by the source.
   */
  sourceDetectedDate: Date | null;
  /**
   * Date when the vulnerability was last detected.
   */
  lastDetectedDate: Date | null;
  severity: VulnSeverityType;
  /**
   * CVSS severity score of the vulnerability.
   */
  cvssSeverityScore: number | null;
  /**
   * Scanner score of the vulnerability.
   */
  scannerScore: number | null;
  /**
   * Whether the vulnerability is fixable.
   */
  isFixable: boolean;
  /**
   * Date when the vulnerability should be remediated by.
   */
  remediateByDate: Date | null;
  /**
   * Related vulnerabilities.
   *
   * @remarks
   * Only relevant to vulnerabilities of type GROUPED.
   */
  relatedVulns: Array<string>;
  /**
   * Related URLs.
   */
  relatedUrls: Array<string>;
  /**
   * External URL for the vulnerability.
   */
  externalURL: string;
  /**
   * Scanning tool that detected the vulnerability
   */
  scanSource?: string | undefined;
  /**
   * Metadata for the deactivation of the vulnerability.
   */
  deactivateMetadata: DeactivateMetadata | null;
};

/** @internal */
export const DeactivateMetadata$inboundSchema: z.ZodType<
  DeactivateMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  isVulnDeactivatedIndefinitely: z.boolean(),
  deactivatedUntilDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  deactivationReason: z.string(),
  deactivatedOnDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  deactivatedBy: z.string(),
});

/** @internal */
export type DeactivateMetadata$Outbound = {
  isVulnDeactivatedIndefinitely: boolean;
  deactivatedUntilDate: string | null;
  deactivationReason: string;
  deactivatedOnDate: string;
  deactivatedBy: string;
};

/** @internal */
export const DeactivateMetadata$outboundSchema: z.ZodType<
  DeactivateMetadata$Outbound,
  z.ZodTypeDef,
  DeactivateMetadata
> = z.object({
  isVulnDeactivatedIndefinitely: z.boolean(),
  deactivatedUntilDate: z.nullable(z.date().transform(v => v.toISOString())),
  deactivationReason: z.string(),
  deactivatedOnDate: z.date().transform(v => v.toISOString()),
  deactivatedBy: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeactivateMetadata$ {
  /** @deprecated use `DeactivateMetadata$inboundSchema` instead. */
  export const inboundSchema = DeactivateMetadata$inboundSchema;
  /** @deprecated use `DeactivateMetadata$outboundSchema` instead. */
  export const outboundSchema = DeactivateMetadata$outboundSchema;
  /** @deprecated use `DeactivateMetadata$Outbound` instead. */
  export type Outbound = DeactivateMetadata$Outbound;
}

export function deactivateMetadataToJSON(
  deactivateMetadata: DeactivateMetadata,
): string {
  return JSON.stringify(
    DeactivateMetadata$outboundSchema.parse(deactivateMetadata),
  );
}

export function deactivateMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DeactivateMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeactivateMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeactivateMetadata' from JSON`,
  );
}

/** @internal */
export const Vulnerability$inboundSchema: z.ZodType<
  Vulnerability,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  integrationId: z.string(),
  packageIdentifier: z.nullable(z.string()),
  vulnerabilityType: VulnerabilityType$inboundSchema,
  targetId: z.string(),
  firstDetectedDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  sourceDetectedDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  lastDetectedDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  severity: VulnSeverityType$inboundSchema,
  cvssSeverityScore: z.nullable(z.number()),
  scannerScore: z.nullable(z.number()),
  isFixable: z.boolean(),
  remediateByDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  relatedVulns: z.array(z.string()),
  relatedUrls: z.array(z.string()),
  externalURL: z.string(),
  scanSource: z.string().optional(),
  deactivateMetadata: z.nullable(
    z.lazy(() => DeactivateMetadata$inboundSchema),
  ),
});

/** @internal */
export type Vulnerability$Outbound = {
  id: string;
  name: string;
  description: string;
  integrationId: string;
  packageIdentifier: string | null;
  vulnerabilityType: string;
  targetId: string;
  firstDetectedDate: string;
  sourceDetectedDate: string | null;
  lastDetectedDate: string | null;
  severity: string;
  cvssSeverityScore: number | null;
  scannerScore: number | null;
  isFixable: boolean;
  remediateByDate: string | null;
  relatedVulns: Array<string>;
  relatedUrls: Array<string>;
  externalURL: string;
  scanSource?: string | undefined;
  deactivateMetadata: DeactivateMetadata$Outbound | null;
};

/** @internal */
export const Vulnerability$outboundSchema: z.ZodType<
  Vulnerability$Outbound,
  z.ZodTypeDef,
  Vulnerability
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  integrationId: z.string(),
  packageIdentifier: z.nullable(z.string()),
  vulnerabilityType: VulnerabilityType$outboundSchema,
  targetId: z.string(),
  firstDetectedDate: z.date().transform(v => v.toISOString()),
  sourceDetectedDate: z.nullable(z.date().transform(v => v.toISOString())),
  lastDetectedDate: z.nullable(z.date().transform(v => v.toISOString())),
  severity: VulnSeverityType$outboundSchema,
  cvssSeverityScore: z.nullable(z.number()),
  scannerScore: z.nullable(z.number()),
  isFixable: z.boolean(),
  remediateByDate: z.nullable(z.date().transform(v => v.toISOString())),
  relatedVulns: z.array(z.string()),
  relatedUrls: z.array(z.string()),
  externalURL: z.string(),
  scanSource: z.string().optional(),
  deactivateMetadata: z.nullable(
    z.lazy(() => DeactivateMetadata$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Vulnerability$ {
  /** @deprecated use `Vulnerability$inboundSchema` instead. */
  export const inboundSchema = Vulnerability$inboundSchema;
  /** @deprecated use `Vulnerability$outboundSchema` instead. */
  export const outboundSchema = Vulnerability$outboundSchema;
  /** @deprecated use `Vulnerability$Outbound` instead. */
  export type Outbound = Vulnerability$Outbound;
}

export function vulnerabilityToJSON(vulnerability: Vulnerability): string {
  return JSON.stringify(Vulnerability$outboundSchema.parse(vulnerability));
}

export function vulnerabilityFromJSON(
  jsonString: string,
): SafeParseResult<Vulnerability, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Vulnerability$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Vulnerability' from JSON`,
  );
}
