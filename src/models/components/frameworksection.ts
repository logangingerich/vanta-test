/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FrameworkId,
  FrameworkId$inboundSchema,
  FrameworkId$outboundSchema,
} from "./frameworkid.js";

export type FrameworkSectionFrameworkId = FrameworkId | string;

export type FrameworkSection = {
  frameworkId: FrameworkId | string;
  sectionId: string;
};

/** @internal */
export const FrameworkSectionFrameworkId$inboundSchema: z.ZodType<
  FrameworkSectionFrameworkId,
  z.ZodTypeDef,
  unknown
> = z.union([FrameworkId$inboundSchema, z.string()]);

/** @internal */
export type FrameworkSectionFrameworkId$Outbound = string | string;

/** @internal */
export const FrameworkSectionFrameworkId$outboundSchema: z.ZodType<
  FrameworkSectionFrameworkId$Outbound,
  z.ZodTypeDef,
  FrameworkSectionFrameworkId
> = z.union([FrameworkId$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FrameworkSectionFrameworkId$ {
  /** @deprecated use `FrameworkSectionFrameworkId$inboundSchema` instead. */
  export const inboundSchema = FrameworkSectionFrameworkId$inboundSchema;
  /** @deprecated use `FrameworkSectionFrameworkId$outboundSchema` instead. */
  export const outboundSchema = FrameworkSectionFrameworkId$outboundSchema;
  /** @deprecated use `FrameworkSectionFrameworkId$Outbound` instead. */
  export type Outbound = FrameworkSectionFrameworkId$Outbound;
}

export function frameworkSectionFrameworkIdToJSON(
  frameworkSectionFrameworkId: FrameworkSectionFrameworkId,
): string {
  return JSON.stringify(
    FrameworkSectionFrameworkId$outboundSchema.parse(
      frameworkSectionFrameworkId,
    ),
  );
}

export function frameworkSectionFrameworkIdFromJSON(
  jsonString: string,
): SafeParseResult<FrameworkSectionFrameworkId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FrameworkSectionFrameworkId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FrameworkSectionFrameworkId' from JSON`,
  );
}

/** @internal */
export const FrameworkSection$inboundSchema: z.ZodType<
  FrameworkSection,
  z.ZodTypeDef,
  unknown
> = z.object({
  frameworkId: z.union([FrameworkId$inboundSchema, z.string()]),
  sectionId: z.string(),
});

/** @internal */
export type FrameworkSection$Outbound = {
  frameworkId: string | string;
  sectionId: string;
};

/** @internal */
export const FrameworkSection$outboundSchema: z.ZodType<
  FrameworkSection$Outbound,
  z.ZodTypeDef,
  FrameworkSection
> = z.object({
  frameworkId: z.union([FrameworkId$outboundSchema, z.string()]),
  sectionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FrameworkSection$ {
  /** @deprecated use `FrameworkSection$inboundSchema` instead. */
  export const inboundSchema = FrameworkSection$inboundSchema;
  /** @deprecated use `FrameworkSection$outboundSchema` instead. */
  export const outboundSchema = FrameworkSection$outboundSchema;
  /** @deprecated use `FrameworkSection$Outbound` instead. */
  export type Outbound = FrameworkSection$Outbound;
}

export function frameworkSectionToJSON(
  frameworkSection: FrameworkSection,
): string {
  return JSON.stringify(
    FrameworkSection$outboundSchema.parse(frameworkSection),
  );
}

export function frameworkSectionFromJSON(
  jsonString: string,
): SafeParseResult<FrameworkSection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FrameworkSection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FrameworkSection' from JSON`,
  );
}
