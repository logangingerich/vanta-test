/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PersonInfoSourceTypeSCIM,
  PersonInfoSourceTypeSCIM$inboundSchema,
  PersonInfoSourceTypeSCIM$outboundSchema,
} from "./personinfosourcetypescim.js";

/**
 * The person's information comes from SCIM.
 */
export type ScimBasedPersonInfoSource = {
  type: PersonInfoSourceTypeSCIM;
};

/** @internal */
export const ScimBasedPersonInfoSource$inboundSchema: z.ZodType<
  ScimBasedPersonInfoSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PersonInfoSourceTypeSCIM$inboundSchema,
});

/** @internal */
export type ScimBasedPersonInfoSource$Outbound = {
  type: string;
};

/** @internal */
export const ScimBasedPersonInfoSource$outboundSchema: z.ZodType<
  ScimBasedPersonInfoSource$Outbound,
  z.ZodTypeDef,
  ScimBasedPersonInfoSource
> = z.object({
  type: PersonInfoSourceTypeSCIM$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScimBasedPersonInfoSource$ {
  /** @deprecated use `ScimBasedPersonInfoSource$inboundSchema` instead. */
  export const inboundSchema = ScimBasedPersonInfoSource$inboundSchema;
  /** @deprecated use `ScimBasedPersonInfoSource$outboundSchema` instead. */
  export const outboundSchema = ScimBasedPersonInfoSource$outboundSchema;
  /** @deprecated use `ScimBasedPersonInfoSource$Outbound` instead. */
  export type Outbound = ScimBasedPersonInfoSource$Outbound;
}

export function scimBasedPersonInfoSourceToJSON(
  scimBasedPersonInfoSource: ScimBasedPersonInfoSource,
): string {
  return JSON.stringify(
    ScimBasedPersonInfoSource$outboundSchema.parse(scimBasedPersonInfoSource),
  );
}

export function scimBasedPersonInfoSourceFromJSON(
  jsonString: string,
): SafeParseResult<ScimBasedPersonInfoSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScimBasedPersonInfoSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScimBasedPersonInfoSource' from JSON`,
  );
}
