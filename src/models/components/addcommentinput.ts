/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddCommentInput = {
  /**
   * Text value of the comment
   */
  text: string;
  /**
   * Email of author. Must match an existing Vanta user and the user must exist under the Audit Firm who is making the API request
   */
  email: string;
  /**
   * When the comment was created in the external system
   */
  creationDate: Date;
};

/** @internal */
export const AddCommentInput$inboundSchema: z.ZodType<
  AddCommentInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  email: z.string(),
  creationDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
});

/** @internal */
export type AddCommentInput$Outbound = {
  text: string;
  email: string;
  creationDate: string;
};

/** @internal */
export const AddCommentInput$outboundSchema: z.ZodType<
  AddCommentInput$Outbound,
  z.ZodTypeDef,
  AddCommentInput
> = z.object({
  text: z.string(),
  email: z.string(),
  creationDate: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCommentInput$ {
  /** @deprecated use `AddCommentInput$inboundSchema` instead. */
  export const inboundSchema = AddCommentInput$inboundSchema;
  /** @deprecated use `AddCommentInput$outboundSchema` instead. */
  export const outboundSchema = AddCommentInput$outboundSchema;
  /** @deprecated use `AddCommentInput$Outbound` instead. */
  export type Outbound = AddCommentInput$Outbound;
}

export function addCommentInputToJSON(
  addCommentInput: AddCommentInput,
): string {
  return JSON.stringify(AddCommentInput$outboundSchema.parse(addCommentInput));
}

export function addCommentInputFromJSON(
  jsonString: string,
): SafeParseResult<AddCommentInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddCommentInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddCommentInput' from JSON`,
  );
}
