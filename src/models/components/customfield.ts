/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Value = string | Array<string>;

export type CustomField = {
  label: string;
  value: string | Array<string>;
};

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.array(z.string())]);

/** @internal */
export type Value$Outbound = string | Array<string>;

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const CustomField$inboundSchema: z.ZodType<
  CustomField,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  value: z.union([z.string(), z.array(z.string())]),
});

/** @internal */
export type CustomField$Outbound = {
  label: string;
  value: string | Array<string>;
};

/** @internal */
export const CustomField$outboundSchema: z.ZodType<
  CustomField$Outbound,
  z.ZodTypeDef,
  CustomField
> = z.object({
  label: z.string(),
  value: z.union([z.string(), z.array(z.string())]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomField$ {
  /** @deprecated use `CustomField$inboundSchema` instead. */
  export const inboundSchema = CustomField$inboundSchema;
  /** @deprecated use `CustomField$outboundSchema` instead. */
  export const outboundSchema = CustomField$outboundSchema;
  /** @deprecated use `CustomField$Outbound` instead. */
  export type Outbound = CustomField$Outbound;
}

export function customFieldToJSON(customField: CustomField): string {
  return JSON.stringify(CustomField$outboundSchema.parse(customField));
}

export function customFieldFromJSON(
  jsonString: string,
): SafeParseResult<CustomField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomField' from JSON`,
  );
}
