/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PageInfo,
  PageInfo$inboundSchema,
  PageInfo$Outbound,
  PageInfo$outboundSchema,
} from "./pageinfo.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";

export type PaginatedResponsePersonResults = {
  data: Array<Person>;
  /**
   * Provides information about the pagination of a dataset.
   */
  pageInfo: PageInfo;
};

export type PaginatedResponsePerson = {
  results: PaginatedResponsePersonResults;
};

/** @internal */
export const PaginatedResponsePersonResults$inboundSchema: z.ZodType<
  PaginatedResponsePersonResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Person$inboundSchema),
  pageInfo: PageInfo$inboundSchema,
});

/** @internal */
export type PaginatedResponsePersonResults$Outbound = {
  data: Array<Person$Outbound>;
  pageInfo: PageInfo$Outbound;
};

/** @internal */
export const PaginatedResponsePersonResults$outboundSchema: z.ZodType<
  PaginatedResponsePersonResults$Outbound,
  z.ZodTypeDef,
  PaginatedResponsePersonResults
> = z.object({
  data: z.array(Person$outboundSchema),
  pageInfo: PageInfo$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedResponsePersonResults$ {
  /** @deprecated use `PaginatedResponsePersonResults$inboundSchema` instead. */
  export const inboundSchema = PaginatedResponsePersonResults$inboundSchema;
  /** @deprecated use `PaginatedResponsePersonResults$outboundSchema` instead. */
  export const outboundSchema = PaginatedResponsePersonResults$outboundSchema;
  /** @deprecated use `PaginatedResponsePersonResults$Outbound` instead. */
  export type Outbound = PaginatedResponsePersonResults$Outbound;
}

export function paginatedResponsePersonResultsToJSON(
  paginatedResponsePersonResults: PaginatedResponsePersonResults,
): string {
  return JSON.stringify(
    PaginatedResponsePersonResults$outboundSchema.parse(
      paginatedResponsePersonResults,
    ),
  );
}

export function paginatedResponsePersonResultsFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedResponsePersonResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedResponsePersonResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedResponsePersonResults' from JSON`,
  );
}

/** @internal */
export const PaginatedResponsePerson$inboundSchema: z.ZodType<
  PaginatedResponsePerson,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.lazy(() => PaginatedResponsePersonResults$inboundSchema),
});

/** @internal */
export type PaginatedResponsePerson$Outbound = {
  results: PaginatedResponsePersonResults$Outbound;
};

/** @internal */
export const PaginatedResponsePerson$outboundSchema: z.ZodType<
  PaginatedResponsePerson$Outbound,
  z.ZodTypeDef,
  PaginatedResponsePerson
> = z.object({
  results: z.lazy(() => PaginatedResponsePersonResults$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedResponsePerson$ {
  /** @deprecated use `PaginatedResponsePerson$inboundSchema` instead. */
  export const inboundSchema = PaginatedResponsePerson$inboundSchema;
  /** @deprecated use `PaginatedResponsePerson$outboundSchema` instead. */
  export const outboundSchema = PaginatedResponsePerson$outboundSchema;
  /** @deprecated use `PaginatedResponsePerson$Outbound` instead. */
  export type Outbound = PaginatedResponsePerson$Outbound;
}

export function paginatedResponsePersonToJSON(
  paginatedResponsePerson: PaginatedResponsePerson,
): string {
  return JSON.stringify(
    PaginatedResponsePerson$outboundSchema.parse(paginatedResponsePerson),
  );
}

export function paginatedResponsePersonFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedResponsePerson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedResponsePerson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedResponsePerson' from JSON`,
  );
}
