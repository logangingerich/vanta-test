/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Comment,
  Comment$inboundSchema,
  Comment$Outbound,
  Comment$outboundSchema,
} from "./comment.js";
import {
  PageInfo,
  PageInfo$inboundSchema,
  PageInfo$Outbound,
  PageInfo$outboundSchema,
} from "./pageinfo.js";

export type PaginatedResponseCommentResults = {
  data: Array<Comment>;
  /**
   * Provides information about the pagination of a dataset.
   */
  pageInfo: PageInfo;
};

export type PaginatedResponseComment = {
  results: PaginatedResponseCommentResults;
};

/** @internal */
export const PaginatedResponseCommentResults$inboundSchema: z.ZodType<
  PaginatedResponseCommentResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Comment$inboundSchema),
  pageInfo: PageInfo$inboundSchema,
});

/** @internal */
export type PaginatedResponseCommentResults$Outbound = {
  data: Array<Comment$Outbound>;
  pageInfo: PageInfo$Outbound;
};

/** @internal */
export const PaginatedResponseCommentResults$outboundSchema: z.ZodType<
  PaginatedResponseCommentResults$Outbound,
  z.ZodTypeDef,
  PaginatedResponseCommentResults
> = z.object({
  data: z.array(Comment$outboundSchema),
  pageInfo: PageInfo$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedResponseCommentResults$ {
  /** @deprecated use `PaginatedResponseCommentResults$inboundSchema` instead. */
  export const inboundSchema = PaginatedResponseCommentResults$inboundSchema;
  /** @deprecated use `PaginatedResponseCommentResults$outboundSchema` instead. */
  export const outboundSchema = PaginatedResponseCommentResults$outboundSchema;
  /** @deprecated use `PaginatedResponseCommentResults$Outbound` instead. */
  export type Outbound = PaginatedResponseCommentResults$Outbound;
}

export function paginatedResponseCommentResultsToJSON(
  paginatedResponseCommentResults: PaginatedResponseCommentResults,
): string {
  return JSON.stringify(
    PaginatedResponseCommentResults$outboundSchema.parse(
      paginatedResponseCommentResults,
    ),
  );
}

export function paginatedResponseCommentResultsFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedResponseCommentResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedResponseCommentResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedResponseCommentResults' from JSON`,
  );
}

/** @internal */
export const PaginatedResponseComment$inboundSchema: z.ZodType<
  PaginatedResponseComment,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.lazy(() => PaginatedResponseCommentResults$inboundSchema),
});

/** @internal */
export type PaginatedResponseComment$Outbound = {
  results: PaginatedResponseCommentResults$Outbound;
};

/** @internal */
export const PaginatedResponseComment$outboundSchema: z.ZodType<
  PaginatedResponseComment$Outbound,
  z.ZodTypeDef,
  PaginatedResponseComment
> = z.object({
  results: z.lazy(() => PaginatedResponseCommentResults$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedResponseComment$ {
  /** @deprecated use `PaginatedResponseComment$inboundSchema` instead. */
  export const inboundSchema = PaginatedResponseComment$inboundSchema;
  /** @deprecated use `PaginatedResponseComment$outboundSchema` instead. */
  export const outboundSchema = PaginatedResponseComment$outboundSchema;
  /** @deprecated use `PaginatedResponseComment$Outbound` instead. */
  export type Outbound = PaginatedResponseComment$Outbound;
}

export function paginatedResponseCommentToJSON(
  paginatedResponseComment: PaginatedResponseComment,
): string {
  return JSON.stringify(
    PaginatedResponseComment$outboundSchema.parse(paginatedResponseComment),
  );
}

export function paginatedResponseCommentFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedResponseComment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedResponseComment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedResponseComment' from JSON`,
  );
}
