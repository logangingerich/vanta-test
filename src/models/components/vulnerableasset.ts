/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VulnerableAssetScanner,
  VulnerableAssetScanner$inboundSchema,
  VulnerableAssetScanner$Outbound,
  VulnerableAssetScanner$outboundSchema,
} from "./vulnerableassetscanner.js";
import {
  VulnerableAssetType,
  VulnerableAssetType$inboundSchema,
  VulnerableAssetType$outboundSchema,
} from "./vulnerableassettype.js";

export type VulnerableAsset = {
  /**
   * Unique identifier for the vulnerable asset.
   */
  id: string;
  /**
   * Display name of the vulnerable asset.
   */
  name: string;
  /**
   * VulnerableAssetType describes the types of assets a vulnerability is on.
   */
  assetType: VulnerableAssetType;
  /**
   * Whether the vulnerable asset has been scanned.
   */
  hasBeenScanned: boolean;
  /**
   * Only relevant for container repositories. This field sets the container image tag that vulnerabilities will be retrieved for. If null, the latest image will be retrieved.
   */
  imageScanTag: string | null;
  /**
   * The integrations that are scanning this vulnerable asset.
   */
  scanners: Array<VulnerableAssetScanner>;
};

/** @internal */
export const VulnerableAsset$inboundSchema: z.ZodType<
  VulnerableAsset,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  assetType: VulnerableAssetType$inboundSchema,
  hasBeenScanned: z.boolean(),
  imageScanTag: z.nullable(z.string()),
  scanners: z.array(VulnerableAssetScanner$inboundSchema),
});

/** @internal */
export type VulnerableAsset$Outbound = {
  id: string;
  name: string;
  assetType: string;
  hasBeenScanned: boolean;
  imageScanTag: string | null;
  scanners: Array<VulnerableAssetScanner$Outbound>;
};

/** @internal */
export const VulnerableAsset$outboundSchema: z.ZodType<
  VulnerableAsset$Outbound,
  z.ZodTypeDef,
  VulnerableAsset
> = z.object({
  id: z.string(),
  name: z.string(),
  assetType: VulnerableAssetType$outboundSchema,
  hasBeenScanned: z.boolean(),
  imageScanTag: z.nullable(z.string()),
  scanners: z.array(VulnerableAssetScanner$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VulnerableAsset$ {
  /** @deprecated use `VulnerableAsset$inboundSchema` instead. */
  export const inboundSchema = VulnerableAsset$inboundSchema;
  /** @deprecated use `VulnerableAsset$outboundSchema` instead. */
  export const outboundSchema = VulnerableAsset$outboundSchema;
  /** @deprecated use `VulnerableAsset$Outbound` instead. */
  export type Outbound = VulnerableAsset$Outbound;
}

export function vulnerableAssetToJSON(
  vulnerableAsset: VulnerableAsset,
): string {
  return JSON.stringify(VulnerableAsset$outboundSchema.parse(vulnerableAsset));
}

export function vulnerableAssetFromJSON(
  jsonString: string,
): SafeParseResult<VulnerableAsset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VulnerableAsset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VulnerableAsset' from JSON`,
  );
}
