/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvidenceControl = {
  /**
   * Name of control associated to this evidence
   */
  name: string;
  /**
   * A list sections associated to the control
   */
  sectionNames: Array<string>;
};

/** @internal */
export const EvidenceControl$inboundSchema: z.ZodType<
  EvidenceControl,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  sectionNames: z.array(z.string()),
});

/** @internal */
export type EvidenceControl$Outbound = {
  name: string;
  sectionNames: Array<string>;
};

/** @internal */
export const EvidenceControl$outboundSchema: z.ZodType<
  EvidenceControl$Outbound,
  z.ZodTypeDef,
  EvidenceControl
> = z.object({
  name: z.string(),
  sectionNames: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvidenceControl$ {
  /** @deprecated use `EvidenceControl$inboundSchema` instead. */
  export const inboundSchema = EvidenceControl$inboundSchema;
  /** @deprecated use `EvidenceControl$outboundSchema` instead. */
  export const outboundSchema = EvidenceControl$outboundSchema;
  /** @deprecated use `EvidenceControl$Outbound` instead. */
  export type Outbound = EvidenceControl$Outbound;
}

export function evidenceControlToJSON(
  evidenceControl: EvidenceControl,
): string {
  return JSON.stringify(EvidenceControl$outboundSchema.parse(evidenceControl));
}

export function evidenceControlFromJSON(
  jsonString: string,
): SafeParseResult<EvidenceControl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvidenceControl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvidenceControl' from JSON`,
  );
}
