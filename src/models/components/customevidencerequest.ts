/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RecurrenceDuration,
  RecurrenceDuration$inboundSchema,
  RecurrenceDuration$outboundSchema,
} from "./recurrenceduration.js";

export type CustomEvidenceRequest = {
  /**
   * Internal id of the custom evidence request within Vanta
   */
  id: string;
  /**
   * A set of controls, referenced by id, to map the evidence to
   */
  controlIds: Array<string>;
  /**
   * Title for the evidence request
   */
  title: string;
  /**
   * Description for the evidence request
   */
  description: string;
  cadence: RecurrenceDuration;
  reminderWindow: RecurrenceDuration;
  /**
   * Whether this document contains sensitive data and needs more restrictive read access
   */
  isRestricted: boolean;
};

/** @internal */
export const CustomEvidenceRequest$inboundSchema: z.ZodType<
  CustomEvidenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  controlIds: z.array(z.string()),
  title: z.string(),
  description: z.string(),
  cadence: RecurrenceDuration$inboundSchema,
  reminderWindow: RecurrenceDuration$inboundSchema,
  isRestricted: z.boolean(),
});

/** @internal */
export type CustomEvidenceRequest$Outbound = {
  id: string;
  controlIds: Array<string>;
  title: string;
  description: string;
  cadence: string;
  reminderWindow: string;
  isRestricted: boolean;
};

/** @internal */
export const CustomEvidenceRequest$outboundSchema: z.ZodType<
  CustomEvidenceRequest$Outbound,
  z.ZodTypeDef,
  CustomEvidenceRequest
> = z.object({
  id: z.string(),
  controlIds: z.array(z.string()),
  title: z.string(),
  description: z.string(),
  cadence: RecurrenceDuration$outboundSchema,
  reminderWindow: RecurrenceDuration$outboundSchema,
  isRestricted: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomEvidenceRequest$ {
  /** @deprecated use `CustomEvidenceRequest$inboundSchema` instead. */
  export const inboundSchema = CustomEvidenceRequest$inboundSchema;
  /** @deprecated use `CustomEvidenceRequest$outboundSchema` instead. */
  export const outboundSchema = CustomEvidenceRequest$outboundSchema;
  /** @deprecated use `CustomEvidenceRequest$Outbound` instead. */
  export type Outbound = CustomEvidenceRequest$Outbound;
}

export function customEvidenceRequestToJSON(
  customEvidenceRequest: CustomEvidenceRequest,
): string {
  return JSON.stringify(
    CustomEvidenceRequest$outboundSchema.parse(customEvidenceRequest),
  );
}

export function customEvidenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomEvidenceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomEvidenceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomEvidenceRequest' from JSON`,
  );
}
