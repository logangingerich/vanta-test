/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type KeyValuePair = {
  /**
   * Key of key-value pair.
   */
  key: string;
  /**
   * Value of key-value pair.
   */
  value: string;
};

/** @internal */
export const KeyValuePair$inboundSchema: z.ZodType<
  KeyValuePair,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.string(),
});

/** @internal */
export type KeyValuePair$Outbound = {
  key: string;
  value: string;
};

/** @internal */
export const KeyValuePair$outboundSchema: z.ZodType<
  KeyValuePair$Outbound,
  z.ZodTypeDef,
  KeyValuePair
> = z.object({
  key: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeyValuePair$ {
  /** @deprecated use `KeyValuePair$inboundSchema` instead. */
  export const inboundSchema = KeyValuePair$inboundSchema;
  /** @deprecated use `KeyValuePair$outboundSchema` instead. */
  export const outboundSchema = KeyValuePair$outboundSchema;
  /** @deprecated use `KeyValuePair$Outbound` instead. */
  export type Outbound = KeyValuePair$Outbound;
}

export function keyValuePairToJSON(keyValuePair: KeyValuePair): string {
  return JSON.stringify(KeyValuePair$outboundSchema.parse(keyValuePair));
}

export function keyValuePairFromJSON(
  jsonString: string,
): SafeParseResult<KeyValuePair, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KeyValuePair$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KeyValuePair' from JSON`,
  );
}
