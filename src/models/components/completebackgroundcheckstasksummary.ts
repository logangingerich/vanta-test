/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskStatus,
  TaskStatus$inboundSchema,
  TaskStatus$outboundSchema,
} from "./taskstatus.js";
import {
  TaskTypeCOMPLETEBACKGROUNDCHECKS,
  TaskTypeCOMPLETEBACKGROUNDCHECKS$inboundSchema,
  TaskTypeCOMPLETEBACKGROUNDCHECKS$outboundSchema,
} from "./tasktypecompletebackgroundchecks.js";

/**
 * If the task is disabled, the reason and date when it was disabled.
 */
export type CompleteBackgroundChecksTaskSummaryDisabled = {
  date: Date;
  reason: string | null;
};

/**
 * Task summary for completing background checks.
 */
export type CompleteBackgroundChecksTaskSummary = {
  taskType: TaskTypeCOMPLETEBACKGROUNDCHECKS;
  /**
   * The status of a task.
   *
   * @remarks
   * - COMPLETE: The task has been completed.
   * - DUE_SOON: The task is due soon.
   * - OVERDUE: The task is overdue.
   * - NONE: The task is not assigned.
   */
  status: TaskStatus;
  /**
   * The due date of the task.
   */
  dueDate: Date | null;
  /**
   * The date the task was completed.
   */
  completionDate: Date | null;
  /**
   * If the task is disabled, the reason and date when it was disabled.
   */
  disabled: CompleteBackgroundChecksTaskSummaryDisabled | null;
};

/** @internal */
export const CompleteBackgroundChecksTaskSummaryDisabled$inboundSchema:
  z.ZodType<
    CompleteBackgroundChecksTaskSummaryDisabled,
    z.ZodTypeDef,
    unknown
  > = z.object({
    date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    reason: z.nullable(z.string()),
  });

/** @internal */
export type CompleteBackgroundChecksTaskSummaryDisabled$Outbound = {
  date: string;
  reason: string | null;
};

/** @internal */
export const CompleteBackgroundChecksTaskSummaryDisabled$outboundSchema:
  z.ZodType<
    CompleteBackgroundChecksTaskSummaryDisabled$Outbound,
    z.ZodTypeDef,
    CompleteBackgroundChecksTaskSummaryDisabled
  > = z.object({
    date: z.date().transform(v => v.toISOString()),
    reason: z.nullable(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteBackgroundChecksTaskSummaryDisabled$ {
  /** @deprecated use `CompleteBackgroundChecksTaskSummaryDisabled$inboundSchema` instead. */
  export const inboundSchema =
    CompleteBackgroundChecksTaskSummaryDisabled$inboundSchema;
  /** @deprecated use `CompleteBackgroundChecksTaskSummaryDisabled$outboundSchema` instead. */
  export const outboundSchema =
    CompleteBackgroundChecksTaskSummaryDisabled$outboundSchema;
  /** @deprecated use `CompleteBackgroundChecksTaskSummaryDisabled$Outbound` instead. */
  export type Outbound = CompleteBackgroundChecksTaskSummaryDisabled$Outbound;
}

export function completeBackgroundChecksTaskSummaryDisabledToJSON(
  completeBackgroundChecksTaskSummaryDisabled:
    CompleteBackgroundChecksTaskSummaryDisabled,
): string {
  return JSON.stringify(
    CompleteBackgroundChecksTaskSummaryDisabled$outboundSchema.parse(
      completeBackgroundChecksTaskSummaryDisabled,
    ),
  );
}

export function completeBackgroundChecksTaskSummaryDisabledFromJSON(
  jsonString: string,
): SafeParseResult<
  CompleteBackgroundChecksTaskSummaryDisabled,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteBackgroundChecksTaskSummaryDisabled$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompleteBackgroundChecksTaskSummaryDisabled' from JSON`,
  );
}

/** @internal */
export const CompleteBackgroundChecksTaskSummary$inboundSchema: z.ZodType<
  CompleteBackgroundChecksTaskSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  taskType: TaskTypeCOMPLETEBACKGROUNDCHECKS$inboundSchema,
  status: TaskStatus$inboundSchema,
  dueDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  completionDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  disabled: z.nullable(
    z.lazy(() => CompleteBackgroundChecksTaskSummaryDisabled$inboundSchema),
  ),
});

/** @internal */
export type CompleteBackgroundChecksTaskSummary$Outbound = {
  taskType: string;
  status: string;
  dueDate: string | null;
  completionDate: string | null;
  disabled: CompleteBackgroundChecksTaskSummaryDisabled$Outbound | null;
};

/** @internal */
export const CompleteBackgroundChecksTaskSummary$outboundSchema: z.ZodType<
  CompleteBackgroundChecksTaskSummary$Outbound,
  z.ZodTypeDef,
  CompleteBackgroundChecksTaskSummary
> = z.object({
  taskType: TaskTypeCOMPLETEBACKGROUNDCHECKS$outboundSchema,
  status: TaskStatus$outboundSchema,
  dueDate: z.nullable(z.date().transform(v => v.toISOString())),
  completionDate: z.nullable(z.date().transform(v => v.toISOString())),
  disabled: z.nullable(
    z.lazy(() => CompleteBackgroundChecksTaskSummaryDisabled$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteBackgroundChecksTaskSummary$ {
  /** @deprecated use `CompleteBackgroundChecksTaskSummary$inboundSchema` instead. */
  export const inboundSchema =
    CompleteBackgroundChecksTaskSummary$inboundSchema;
  /** @deprecated use `CompleteBackgroundChecksTaskSummary$outboundSchema` instead. */
  export const outboundSchema =
    CompleteBackgroundChecksTaskSummary$outboundSchema;
  /** @deprecated use `CompleteBackgroundChecksTaskSummary$Outbound` instead. */
  export type Outbound = CompleteBackgroundChecksTaskSummary$Outbound;
}

export function completeBackgroundChecksTaskSummaryToJSON(
  completeBackgroundChecksTaskSummary: CompleteBackgroundChecksTaskSummary,
): string {
  return JSON.stringify(
    CompleteBackgroundChecksTaskSummary$outboundSchema.parse(
      completeBackgroundChecksTaskSummary,
    ),
  );
}

export function completeBackgroundChecksTaskSummaryFromJSON(
  jsonString: string,
): SafeParseResult<CompleteBackgroundChecksTaskSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteBackgroundChecksTaskSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteBackgroundChecksTaskSummary' from JSON`,
  );
}
