/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  KeyValuePair,
  KeyValuePair$inboundSchema,
  KeyValuePair$Outbound,
  KeyValuePair$outboundSchema,
} from "./keyvaluepair.js";

export type VulnerableAssetScanner = {
  /**
   * The scanned asset's Vanta resource id.
   */
  resourceId: string;
  /**
   * Integration that the the vulnerable asset is scanned by.
   */
  integrationId: string;
  /**
   * Digest of the scanned container image.
   */
  imageDigest: string | null;
  /**
   * Push date of the scanned container image.
   */
  imagePushedAtDate: Date | null;
  /**
   * Tags of the scanned container image.
   */
  imageTags: Array<string> | null;
  /**
   * Tags of the scanned asset.
   */
  assetTags: Array<KeyValuePair> | null;
  /**
   * The parent account or organization of the scanned asset.
   */
  parentAccountOrOrganization: string | null;
  /**
   * BIOS UUID of the scanned asset.
   */
  biosUuid: string;
  /**
   * IPV4s of the scanned asset.
   */
  ipv4s: Array<string> | null;
  /**
   * IPV6s of the scanned asset.
   */
  ipv6s: Array<string> | null;
  /**
   * Mac addresses of the scanned asset.
   */
  macAddresses: Array<string> | null;
  /**
   * Host names of the scanned asset.
   */
  hostnames: Array<string> | null;
  /**
   * fqdns of the scanned asset.
   */
  fqdns: Array<string> | null;
  /**
   * Operating systems of the scanned asset.
   */
  operatingSystems: Array<string> | null;
  /**
   * The asset's identifier code.
   */
  targetId: string | null;
};

/** @internal */
export const VulnerableAssetScanner$inboundSchema: z.ZodType<
  VulnerableAssetScanner,
  z.ZodTypeDef,
  unknown
> = z.object({
  resourceId: z.string(),
  integrationId: z.string(),
  imageDigest: z.nullable(z.string()),
  imagePushedAtDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  imageTags: z.nullable(z.array(z.string())),
  assetTags: z.nullable(z.array(KeyValuePair$inboundSchema)),
  parentAccountOrOrganization: z.nullable(z.string()),
  biosUuid: z.string(),
  ipv4s: z.nullable(z.array(z.string())),
  ipv6s: z.nullable(z.array(z.string())),
  macAddresses: z.nullable(z.array(z.string())),
  hostnames: z.nullable(z.array(z.string())),
  fqdns: z.nullable(z.array(z.string())),
  operatingSystems: z.nullable(z.array(z.string())),
  targetId: z.nullable(z.string()),
});

/** @internal */
export type VulnerableAssetScanner$Outbound = {
  resourceId: string;
  integrationId: string;
  imageDigest: string | null;
  imagePushedAtDate: string | null;
  imageTags: Array<string> | null;
  assetTags: Array<KeyValuePair$Outbound> | null;
  parentAccountOrOrganization: string | null;
  biosUuid: string;
  ipv4s: Array<string> | null;
  ipv6s: Array<string> | null;
  macAddresses: Array<string> | null;
  hostnames: Array<string> | null;
  fqdns: Array<string> | null;
  operatingSystems: Array<string> | null;
  targetId: string | null;
};

/** @internal */
export const VulnerableAssetScanner$outboundSchema: z.ZodType<
  VulnerableAssetScanner$Outbound,
  z.ZodTypeDef,
  VulnerableAssetScanner
> = z.object({
  resourceId: z.string(),
  integrationId: z.string(),
  imageDigest: z.nullable(z.string()),
  imagePushedAtDate: z.nullable(z.date().transform(v => v.toISOString())),
  imageTags: z.nullable(z.array(z.string())),
  assetTags: z.nullable(z.array(KeyValuePair$outboundSchema)),
  parentAccountOrOrganization: z.nullable(z.string()),
  biosUuid: z.string(),
  ipv4s: z.nullable(z.array(z.string())),
  ipv6s: z.nullable(z.array(z.string())),
  macAddresses: z.nullable(z.array(z.string())),
  hostnames: z.nullable(z.array(z.string())),
  fqdns: z.nullable(z.array(z.string())),
  operatingSystems: z.nullable(z.array(z.string())),
  targetId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VulnerableAssetScanner$ {
  /** @deprecated use `VulnerableAssetScanner$inboundSchema` instead. */
  export const inboundSchema = VulnerableAssetScanner$inboundSchema;
  /** @deprecated use `VulnerableAssetScanner$outboundSchema` instead. */
  export const outboundSchema = VulnerableAssetScanner$outboundSchema;
  /** @deprecated use `VulnerableAssetScanner$Outbound` instead. */
  export type Outbound = VulnerableAssetScanner$Outbound;
}

export function vulnerableAssetScannerToJSON(
  vulnerableAssetScanner: VulnerableAssetScanner,
): string {
  return JSON.stringify(
    VulnerableAssetScanner$outboundSchema.parse(vulnerableAssetScanner),
  );
}

export function vulnerableAssetScannerFromJSON(
  jsonString: string,
): SafeParseResult<VulnerableAssetScanner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VulnerableAssetScanner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VulnerableAssetScanner' from JSON`,
  );
}
