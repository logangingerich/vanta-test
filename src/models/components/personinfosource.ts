/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IntegrationBasedPersonInfoSource,
  IntegrationBasedPersonInfoSource$inboundSchema,
  IntegrationBasedPersonInfoSource$Outbound,
  IntegrationBasedPersonInfoSource$outboundSchema,
} from "./integrationbasedpersoninfosource.js";
import {
  ScimBasedPersonInfoSource,
  ScimBasedPersonInfoSource$inboundSchema,
  ScimBasedPersonInfoSource$Outbound,
  ScimBasedPersonInfoSource$outboundSchema,
} from "./scimbasedpersoninfosource.js";
import {
  VantaBasedPersonInfoSource,
  VantaBasedPersonInfoSource$inboundSchema,
  VantaBasedPersonInfoSource$Outbound,
  VantaBasedPersonInfoSource$outboundSchema,
} from "./vantabasedpersoninfosource.js";

/**
 * The source of the person's information.
 */
export type PersonInfoSource =
  | VantaBasedPersonInfoSource
  | ScimBasedPersonInfoSource
  | IntegrationBasedPersonInfoSource;

/** @internal */
export const PersonInfoSource$inboundSchema: z.ZodType<
  PersonInfoSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  VantaBasedPersonInfoSource$inboundSchema,
  ScimBasedPersonInfoSource$inboundSchema,
  IntegrationBasedPersonInfoSource$inboundSchema,
]);

/** @internal */
export type PersonInfoSource$Outbound =
  | VantaBasedPersonInfoSource$Outbound
  | ScimBasedPersonInfoSource$Outbound
  | IntegrationBasedPersonInfoSource$Outbound;

/** @internal */
export const PersonInfoSource$outboundSchema: z.ZodType<
  PersonInfoSource$Outbound,
  z.ZodTypeDef,
  PersonInfoSource
> = z.union([
  VantaBasedPersonInfoSource$outboundSchema,
  ScimBasedPersonInfoSource$outboundSchema,
  IntegrationBasedPersonInfoSource$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonInfoSource$ {
  /** @deprecated use `PersonInfoSource$inboundSchema` instead. */
  export const inboundSchema = PersonInfoSource$inboundSchema;
  /** @deprecated use `PersonInfoSource$outboundSchema` instead. */
  export const outboundSchema = PersonInfoSource$outboundSchema;
  /** @deprecated use `PersonInfoSource$Outbound` instead. */
  export type Outbound = PersonInfoSource$Outbound;
}

export function personInfoSourceToJSON(
  personInfoSource: PersonInfoSource,
): string {
  return JSON.stringify(
    PersonInfoSource$outboundSchema.parse(personInfoSource),
  );
}

export function personInfoSourceFromJSON(
  jsonString: string,
): SafeParseResult<PersonInfoSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonInfoSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonInfoSource' from JSON`,
  );
}
