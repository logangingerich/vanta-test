/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuditEvidenceState,
  AuditEvidenceState$inboundSchema,
  AuditEvidenceState$outboundSchema,
} from "./auditevidencestate.js";
import {
  AuditEvidenceType,
  AuditEvidenceType$inboundSchema,
  AuditEvidenceType$outboundSchema,
} from "./auditevidencetype.js";
import {
  EvidenceControl,
  EvidenceControl$inboundSchema,
  EvidenceControl$Outbound,
  EvidenceControl$outboundSchema,
} from "./evidencecontrol.js";

export type Evidence = {
  /**
   * Vanta internal reference to evidence
   */
  id: string;
  /**
   * This is a static UUID to map Audit Firm controls to Vanta controls
   */
  externalId: string;
  status: AuditEvidenceState;
  /**
   * Mutable name for evidence. Not guaranteed to be unique.
   */
  name: string;
  /**
   * The date this Audit Evidence was deleted
   */
  deletionDate: Date | null;
  /**
   * The date this Audit Evidence was created
   */
  creationDate: Date;
  /**
   * Point in time that status was last updated
   */
  statusUpdatedDate: Date;
  /**
   * The outcome of the automated test run, for Test-type evidence
   */
  testStatus: string | null;
  evidenceType: AuditEvidenceType;
  /**
   * Unique identifier for evidence
   */
  evidenceId: string;
  /**
   * The controls associated to this evidence
   */
  relatedControls: Array<EvidenceControl>;
  /**
   * The description for the evidence. It will be set to null if the evidence is deleted
   */
  description: string | null;
};

/** @internal */
export const Evidence$inboundSchema: z.ZodType<
  Evidence,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.string(),
  status: AuditEvidenceState$inboundSchema,
  name: z.string(),
  deletionDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  creationDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  statusUpdatedDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  testStatus: z.nullable(z.string()),
  evidenceType: AuditEvidenceType$inboundSchema,
  evidenceId: z.string(),
  relatedControls: z.array(EvidenceControl$inboundSchema),
  description: z.nullable(z.string()),
});

/** @internal */
export type Evidence$Outbound = {
  id: string;
  externalId: string;
  status: string;
  name: string;
  deletionDate: string | null;
  creationDate: string;
  statusUpdatedDate: string;
  testStatus: string | null;
  evidenceType: string;
  evidenceId: string;
  relatedControls: Array<EvidenceControl$Outbound>;
  description: string | null;
};

/** @internal */
export const Evidence$outboundSchema: z.ZodType<
  Evidence$Outbound,
  z.ZodTypeDef,
  Evidence
> = z.object({
  id: z.string(),
  externalId: z.string(),
  status: AuditEvidenceState$outboundSchema,
  name: z.string(),
  deletionDate: z.nullable(z.date().transform(v => v.toISOString())),
  creationDate: z.date().transform(v => v.toISOString()),
  statusUpdatedDate: z.date().transform(v => v.toISOString()),
  testStatus: z.nullable(z.string()),
  evidenceType: AuditEvidenceType$outboundSchema,
  evidenceId: z.string(),
  relatedControls: z.array(EvidenceControl$outboundSchema),
  description: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evidence$ {
  /** @deprecated use `Evidence$inboundSchema` instead. */
  export const inboundSchema = Evidence$inboundSchema;
  /** @deprecated use `Evidence$outboundSchema` instead. */
  export const outboundSchema = Evidence$outboundSchema;
  /** @deprecated use `Evidence$Outbound` instead. */
  export type Outbound = Evidence$Outbound;
}

export function evidenceToJSON(evidence: Evidence): string {
  return JSON.stringify(Evidence$outboundSchema.parse(evidence));
}

export function evidenceFromJSON(
  jsonString: string,
): SafeParseResult<Evidence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evidence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evidence' from JSON`,
  );
}
