/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ControlDomain,
  ControlDomain$inboundSchema,
  ControlDomain$outboundSchema,
} from "./controldomain.js";
import {
  FrameworkSection,
  FrameworkSection$inboundSchema,
  FrameworkSection$Outbound,
  FrameworkSection$outboundSchema,
} from "./frameworksection.js";

/**
 * The GDPR role of the control, which specifies whether the data is being "collected" or "processed". See the GdprRole enum for possible values.
 *
 * @remarks
 * This field should only be included for controls that are to be mapped to the GDPR framework.
 */
export const Role = {
  Both: "BOTH",
  Controller: "CONTROLLER",
  Processor: "PROCESSOR",
} as const;
/**
 * The GDPR role of the control, which specifies whether the data is being "collected" or "processed". See the GdprRole enum for possible values.
 *
 * @remarks
 * This field should only be included for controls that are to be mapped to the GDPR framework.
 */
export type Role = ClosedEnum<typeof Role>;

export type CreateCustomControlInput = {
  /**
   * The external id of the control.
   */
  externalId: string;
  /**
   * The name of the control.
   */
  name: string | null;
  /**
   * The description of the control.
   */
  description: string;
  /**
   * The effective date of the control.
   */
  effectiveDate: Date;
  category: ControlDomain;
  /**
   * Framework sections that the control should be mapped to.
   */
  sections?: Array<FrameworkSection> | null | undefined;
  /**
   * The GDPR role of the control, which specifies whether the data is being "collected" or "processed". See the GdprRole enum for possible values.
   *
   * @remarks
   * This field should only be included for controls that are to be mapped to the GDPR framework.
   */
  role?: Role | null | undefined;
};

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const CreateCustomControlInput$inboundSchema: z.ZodType<
  CreateCustomControlInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  externalId: z.string(),
  name: z.nullable(z.string()),
  description: z.string(),
  effectiveDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  category: ControlDomain$inboundSchema,
  sections: z.nullable(z.array(FrameworkSection$inboundSchema)).optional(),
  role: z.nullable(Role$inboundSchema).optional(),
});

/** @internal */
export type CreateCustomControlInput$Outbound = {
  externalId: string;
  name: string | null;
  description: string;
  effectiveDate: string;
  category: string;
  sections?: Array<FrameworkSection$Outbound> | null | undefined;
  role?: string | null | undefined;
};

/** @internal */
export const CreateCustomControlInput$outboundSchema: z.ZodType<
  CreateCustomControlInput$Outbound,
  z.ZodTypeDef,
  CreateCustomControlInput
> = z.object({
  externalId: z.string(),
  name: z.nullable(z.string()),
  description: z.string(),
  effectiveDate: z.date().transform(v => v.toISOString()),
  category: ControlDomain$outboundSchema,
  sections: z.nullable(z.array(FrameworkSection$outboundSchema)).optional(),
  role: z.nullable(Role$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomControlInput$ {
  /** @deprecated use `CreateCustomControlInput$inboundSchema` instead. */
  export const inboundSchema = CreateCustomControlInput$inboundSchema;
  /** @deprecated use `CreateCustomControlInput$outboundSchema` instead. */
  export const outboundSchema = CreateCustomControlInput$outboundSchema;
  /** @deprecated use `CreateCustomControlInput$Outbound` instead. */
  export type Outbound = CreateCustomControlInput$Outbound;
}

export function createCustomControlInputToJSON(
  createCustomControlInput: CreateCustomControlInput,
): string {
  return JSON.stringify(
    CreateCustomControlInput$outboundSchema.parse(createCustomControlInput),
  );
}

export function createCustomControlInputFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomControlInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomControlInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomControlInput' from JSON`,
  );
}
