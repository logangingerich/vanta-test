/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuditorEnabledStateTransition,
  AuditorEnabledStateTransition$inboundSchema,
  AuditorEnabledStateTransition$outboundSchema,
} from "./auditorenabledstatetransition.js";

export type StatusUpdate = {
  /**
   * Email of the auditor who changed the state
   */
  auditorEmail: string;
  stateTransition: AuditorEnabledStateTransition;
};

export type AuditEvidenceUpdateInput = {
  statusUpdate?: StatusUpdate | undefined;
};

/** @internal */
export const StatusUpdate$inboundSchema: z.ZodType<
  StatusUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  auditorEmail: z.string(),
  stateTransition: AuditorEnabledStateTransition$inboundSchema,
});

/** @internal */
export type StatusUpdate$Outbound = {
  auditorEmail: string;
  stateTransition: string;
};

/** @internal */
export const StatusUpdate$outboundSchema: z.ZodType<
  StatusUpdate$Outbound,
  z.ZodTypeDef,
  StatusUpdate
> = z.object({
  auditorEmail: z.string(),
  stateTransition: AuditorEnabledStateTransition$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusUpdate$ {
  /** @deprecated use `StatusUpdate$inboundSchema` instead. */
  export const inboundSchema = StatusUpdate$inboundSchema;
  /** @deprecated use `StatusUpdate$outboundSchema` instead. */
  export const outboundSchema = StatusUpdate$outboundSchema;
  /** @deprecated use `StatusUpdate$Outbound` instead. */
  export type Outbound = StatusUpdate$Outbound;
}

export function statusUpdateToJSON(statusUpdate: StatusUpdate): string {
  return JSON.stringify(StatusUpdate$outboundSchema.parse(statusUpdate));
}

export function statusUpdateFromJSON(
  jsonString: string,
): SafeParseResult<StatusUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatusUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatusUpdate' from JSON`,
  );
}

/** @internal */
export const AuditEvidenceUpdateInput$inboundSchema: z.ZodType<
  AuditEvidenceUpdateInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusUpdate: z.lazy(() => StatusUpdate$inboundSchema).optional(),
});

/** @internal */
export type AuditEvidenceUpdateInput$Outbound = {
  statusUpdate?: StatusUpdate$Outbound | undefined;
};

/** @internal */
export const AuditEvidenceUpdateInput$outboundSchema: z.ZodType<
  AuditEvidenceUpdateInput$Outbound,
  z.ZodTypeDef,
  AuditEvidenceUpdateInput
> = z.object({
  statusUpdate: z.lazy(() => StatusUpdate$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditEvidenceUpdateInput$ {
  /** @deprecated use `AuditEvidenceUpdateInput$inboundSchema` instead. */
  export const inboundSchema = AuditEvidenceUpdateInput$inboundSchema;
  /** @deprecated use `AuditEvidenceUpdateInput$outboundSchema` instead. */
  export const outboundSchema = AuditEvidenceUpdateInput$outboundSchema;
  /** @deprecated use `AuditEvidenceUpdateInput$Outbound` instead. */
  export type Outbound = AuditEvidenceUpdateInput$Outbound;
}

export function auditEvidenceUpdateInputToJSON(
  auditEvidenceUpdateInput: AuditEvidenceUpdateInput,
): string {
  return JSON.stringify(
    AuditEvidenceUpdateInput$outboundSchema.parse(auditEvidenceUpdateInput),
  );
}

export function auditEvidenceUpdateInputFromJSON(
  jsonString: string,
): SafeParseResult<AuditEvidenceUpdateInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuditEvidenceUpdateInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuditEvidenceUpdateInput' from JSON`,
  );
}
