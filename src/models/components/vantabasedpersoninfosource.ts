/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PersonInfoSourceTypeVANTA,
  PersonInfoSourceTypeVANTA$inboundSchema,
  PersonInfoSourceTypeVANTA$outboundSchema,
} from "./personinfosourcetypevanta.js";

/**
 * The person's information comes from what is set in Vanta.
 */
export type VantaBasedPersonInfoSource = {
  type: PersonInfoSourceTypeVANTA;
};

/** @internal */
export const VantaBasedPersonInfoSource$inboundSchema: z.ZodType<
  VantaBasedPersonInfoSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PersonInfoSourceTypeVANTA$inboundSchema,
});

/** @internal */
export type VantaBasedPersonInfoSource$Outbound = {
  type: string;
};

/** @internal */
export const VantaBasedPersonInfoSource$outboundSchema: z.ZodType<
  VantaBasedPersonInfoSource$Outbound,
  z.ZodTypeDef,
  VantaBasedPersonInfoSource
> = z.object({
  type: PersonInfoSourceTypeVANTA$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VantaBasedPersonInfoSource$ {
  /** @deprecated use `VantaBasedPersonInfoSource$inboundSchema` instead. */
  export const inboundSchema = VantaBasedPersonInfoSource$inboundSchema;
  /** @deprecated use `VantaBasedPersonInfoSource$outboundSchema` instead. */
  export const outboundSchema = VantaBasedPersonInfoSource$outboundSchema;
  /** @deprecated use `VantaBasedPersonInfoSource$Outbound` instead. */
  export type Outbound = VantaBasedPersonInfoSource$Outbound;
}

export function vantaBasedPersonInfoSourceToJSON(
  vantaBasedPersonInfoSource: VantaBasedPersonInfoSource,
): string {
  return JSON.stringify(
    VantaBasedPersonInfoSource$outboundSchema.parse(vantaBasedPersonInfoSource),
  );
}

export function vantaBasedPersonInfoSourceFromJSON(
  jsonString: string,
): SafeParseResult<VantaBasedPersonInfoSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VantaBasedPersonInfoSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VantaBasedPersonInfoSource' from JSON`,
  );
}
