/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PageInfo,
  PageInfo$inboundSchema,
  PageInfo$Outbound,
  PageInfo$outboundSchema,
} from "./pageinfo.js";
import {
  Vendor,
  Vendor$inboundSchema,
  Vendor$Outbound,
  Vendor$outboundSchema,
} from "./vendor.js";

export type PaginatedResponseVendorResults = {
  data: Array<Vendor>;
  /**
   * Provides information about the pagination of a dataset.
   */
  pageInfo: PageInfo;
};

export type PaginatedResponseVendor = {
  results: PaginatedResponseVendorResults;
};

/** @internal */
export const PaginatedResponseVendorResults$inboundSchema: z.ZodType<
  PaginatedResponseVendorResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Vendor$inboundSchema),
  pageInfo: PageInfo$inboundSchema,
});

/** @internal */
export type PaginatedResponseVendorResults$Outbound = {
  data: Array<Vendor$Outbound>;
  pageInfo: PageInfo$Outbound;
};

/** @internal */
export const PaginatedResponseVendorResults$outboundSchema: z.ZodType<
  PaginatedResponseVendorResults$Outbound,
  z.ZodTypeDef,
  PaginatedResponseVendorResults
> = z.object({
  data: z.array(Vendor$outboundSchema),
  pageInfo: PageInfo$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedResponseVendorResults$ {
  /** @deprecated use `PaginatedResponseVendorResults$inboundSchema` instead. */
  export const inboundSchema = PaginatedResponseVendorResults$inboundSchema;
  /** @deprecated use `PaginatedResponseVendorResults$outboundSchema` instead. */
  export const outboundSchema = PaginatedResponseVendorResults$outboundSchema;
  /** @deprecated use `PaginatedResponseVendorResults$Outbound` instead. */
  export type Outbound = PaginatedResponseVendorResults$Outbound;
}

export function paginatedResponseVendorResultsToJSON(
  paginatedResponseVendorResults: PaginatedResponseVendorResults,
): string {
  return JSON.stringify(
    PaginatedResponseVendorResults$outboundSchema.parse(
      paginatedResponseVendorResults,
    ),
  );
}

export function paginatedResponseVendorResultsFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedResponseVendorResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedResponseVendorResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedResponseVendorResults' from JSON`,
  );
}

/** @internal */
export const PaginatedResponseVendor$inboundSchema: z.ZodType<
  PaginatedResponseVendor,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.lazy(() => PaginatedResponseVendorResults$inboundSchema),
});

/** @internal */
export type PaginatedResponseVendor$Outbound = {
  results: PaginatedResponseVendorResults$Outbound;
};

/** @internal */
export const PaginatedResponseVendor$outboundSchema: z.ZodType<
  PaginatedResponseVendor$Outbound,
  z.ZodTypeDef,
  PaginatedResponseVendor
> = z.object({
  results: z.lazy(() => PaginatedResponseVendorResults$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedResponseVendor$ {
  /** @deprecated use `PaginatedResponseVendor$inboundSchema` instead. */
  export const inboundSchema = PaginatedResponseVendor$inboundSchema;
  /** @deprecated use `PaginatedResponseVendor$outboundSchema` instead. */
  export const outboundSchema = PaginatedResponseVendor$outboundSchema;
  /** @deprecated use `PaginatedResponseVendor$Outbound` instead. */
  export type Outbound = PaginatedResponseVendor$Outbound;
}

export function paginatedResponseVendorToJSON(
  paginatedResponseVendor: PaginatedResponseVendor,
): string {
  return JSON.stringify(
    PaginatedResponseVendor$outboundSchema.parse(paginatedResponseVendor),
  );
}

export function paginatedResponseVendorFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedResponseVendor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedResponseVendor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedResponseVendor' from JSON`,
  );
}
