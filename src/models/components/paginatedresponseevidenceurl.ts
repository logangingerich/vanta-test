/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EvidenceUrl,
  EvidenceUrl$inboundSchema,
  EvidenceUrl$Outbound,
  EvidenceUrl$outboundSchema,
} from "./evidenceurl.js";
import {
  PageInfo,
  PageInfo$inboundSchema,
  PageInfo$Outbound,
  PageInfo$outboundSchema,
} from "./pageinfo.js";

export type PaginatedResponseEvidenceUrlResults = {
  data: Array<EvidenceUrl>;
  /**
   * Provides information about the pagination of a dataset.
   */
  pageInfo: PageInfo;
};

export type PaginatedResponseEvidenceUrl = {
  results: PaginatedResponseEvidenceUrlResults;
};

/** @internal */
export const PaginatedResponseEvidenceUrlResults$inboundSchema: z.ZodType<
  PaginatedResponseEvidenceUrlResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(EvidenceUrl$inboundSchema),
  pageInfo: PageInfo$inboundSchema,
});

/** @internal */
export type PaginatedResponseEvidenceUrlResults$Outbound = {
  data: Array<EvidenceUrl$Outbound>;
  pageInfo: PageInfo$Outbound;
};

/** @internal */
export const PaginatedResponseEvidenceUrlResults$outboundSchema: z.ZodType<
  PaginatedResponseEvidenceUrlResults$Outbound,
  z.ZodTypeDef,
  PaginatedResponseEvidenceUrlResults
> = z.object({
  data: z.array(EvidenceUrl$outboundSchema),
  pageInfo: PageInfo$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedResponseEvidenceUrlResults$ {
  /** @deprecated use `PaginatedResponseEvidenceUrlResults$inboundSchema` instead. */
  export const inboundSchema =
    PaginatedResponseEvidenceUrlResults$inboundSchema;
  /** @deprecated use `PaginatedResponseEvidenceUrlResults$outboundSchema` instead. */
  export const outboundSchema =
    PaginatedResponseEvidenceUrlResults$outboundSchema;
  /** @deprecated use `PaginatedResponseEvidenceUrlResults$Outbound` instead. */
  export type Outbound = PaginatedResponseEvidenceUrlResults$Outbound;
}

export function paginatedResponseEvidenceUrlResultsToJSON(
  paginatedResponseEvidenceUrlResults: PaginatedResponseEvidenceUrlResults,
): string {
  return JSON.stringify(
    PaginatedResponseEvidenceUrlResults$outboundSchema.parse(
      paginatedResponseEvidenceUrlResults,
    ),
  );
}

export function paginatedResponseEvidenceUrlResultsFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedResponseEvidenceUrlResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaginatedResponseEvidenceUrlResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedResponseEvidenceUrlResults' from JSON`,
  );
}

/** @internal */
export const PaginatedResponseEvidenceUrl$inboundSchema: z.ZodType<
  PaginatedResponseEvidenceUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.lazy(() => PaginatedResponseEvidenceUrlResults$inboundSchema),
});

/** @internal */
export type PaginatedResponseEvidenceUrl$Outbound = {
  results: PaginatedResponseEvidenceUrlResults$Outbound;
};

/** @internal */
export const PaginatedResponseEvidenceUrl$outboundSchema: z.ZodType<
  PaginatedResponseEvidenceUrl$Outbound,
  z.ZodTypeDef,
  PaginatedResponseEvidenceUrl
> = z.object({
  results: z.lazy(() => PaginatedResponseEvidenceUrlResults$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginatedResponseEvidenceUrl$ {
  /** @deprecated use `PaginatedResponseEvidenceUrl$inboundSchema` instead. */
  export const inboundSchema = PaginatedResponseEvidenceUrl$inboundSchema;
  /** @deprecated use `PaginatedResponseEvidenceUrl$outboundSchema` instead. */
  export const outboundSchema = PaginatedResponseEvidenceUrl$outboundSchema;
  /** @deprecated use `PaginatedResponseEvidenceUrl$Outbound` instead. */
  export type Outbound = PaginatedResponseEvidenceUrl$Outbound;
}

export function paginatedResponseEvidenceUrlToJSON(
  paginatedResponseEvidenceUrl: PaginatedResponseEvidenceUrl,
): string {
  return JSON.stringify(
    PaginatedResponseEvidenceUrl$outboundSchema.parse(
      paginatedResponseEvidenceUrl,
    ),
  );
}

export function paginatedResponseEvidenceUrlFromJSON(
  jsonString: string,
): SafeParseResult<PaginatedResponseEvidenceUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginatedResponseEvidenceUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginatedResponseEvidenceUrl' from JSON`,
  );
}
