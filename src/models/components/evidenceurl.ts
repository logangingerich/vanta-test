/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvidenceUrl = {
  /**
   * Vanta internal reference to evidence
   */
  id: string;
  /**
   * Pre-signed S3 URL for evidence
   */
  url: string;
  /**
   * File name of evidence
   */
  filename: string;
  /**
   * Set to true if this is a presigned s3 url. Set to false if this is a customer uploaded link
   */
  isDownloadable: boolean;
};

/** @internal */
export const EvidenceUrl$inboundSchema: z.ZodType<
  EvidenceUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  url: z.string(),
  filename: z.string(),
  isDownloadable: z.boolean(),
});

/** @internal */
export type EvidenceUrl$Outbound = {
  id: string;
  url: string;
  filename: string;
  isDownloadable: boolean;
};

/** @internal */
export const EvidenceUrl$outboundSchema: z.ZodType<
  EvidenceUrl$Outbound,
  z.ZodTypeDef,
  EvidenceUrl
> = z.object({
  id: z.string(),
  url: z.string(),
  filename: z.string(),
  isDownloadable: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvidenceUrl$ {
  /** @deprecated use `EvidenceUrl$inboundSchema` instead. */
  export const inboundSchema = EvidenceUrl$inboundSchema;
  /** @deprecated use `EvidenceUrl$outboundSchema` instead. */
  export const outboundSchema = EvidenceUrl$outboundSchema;
  /** @deprecated use `EvidenceUrl$Outbound` instead. */
  export type Outbound = EvidenceUrl$Outbound;
}

export function evidenceUrlToJSON(evidenceUrl: EvidenceUrl): string {
  return JSON.stringify(EvidenceUrl$outboundSchema.parse(evidenceUrl));
}

export function evidenceUrlFromJSON(
  jsonString: string,
): SafeParseResult<EvidenceUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvidenceUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvidenceUrl' from JSON`,
  );
}
