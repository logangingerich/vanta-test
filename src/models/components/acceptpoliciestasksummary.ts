/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaskStatus,
  TaskStatus$inboundSchema,
  TaskStatus$outboundSchema,
} from "./taskstatus.js";
import {
  TaskTypeACCEPTPOLICIES,
  TaskTypeACCEPTPOLICIES$inboundSchema,
  TaskTypeACCEPTPOLICIES$outboundSchema,
} from "./tasktypeacceptpolicies.js";

/**
 * If the task is disabled, the reason and date when it was disabled.
 */
export type AcceptPoliciesTaskSummaryDisabled = {
  date: Date;
  reason: string | null;
};

export type UnacceptedPolicies = {
  name: string;
};

export type AcceptedPolicies = {
  name: string;
};

/**
 * Policy acceptance details for a person.
 */
export type AcceptPoliciesTaskSummary = {
  taskType: TaskTypeACCEPTPOLICIES;
  /**
   * The status of a task.
   *
   * @remarks
   * - COMPLETE: The task has been completed.
   * - DUE_SOON: The task is due soon.
   * - OVERDUE: The task is overdue.
   * - NONE: The task is not assigned.
   */
  status: TaskStatus;
  /**
   * The due date of the task.
   */
  dueDate: Date | null;
  /**
   * The date the task was completed.
   */
  completionDate: Date | null;
  /**
   * If the task is disabled, the reason and date when it was disabled.
   */
  disabled: AcceptPoliciesTaskSummaryDisabled | null;
  /**
   * Unaccepted policies that are relevant to the person.
   */
  unacceptedPolicies: Array<UnacceptedPolicies>;
  /**
   * Accepted policies that are relevant to the person.
   */
  acceptedPolicies: Array<AcceptedPolicies>;
};

/** @internal */
export const AcceptPoliciesTaskSummaryDisabled$inboundSchema: z.ZodType<
  AcceptPoliciesTaskSummaryDisabled,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  reason: z.nullable(z.string()),
});

/** @internal */
export type AcceptPoliciesTaskSummaryDisabled$Outbound = {
  date: string;
  reason: string | null;
};

/** @internal */
export const AcceptPoliciesTaskSummaryDisabled$outboundSchema: z.ZodType<
  AcceptPoliciesTaskSummaryDisabled$Outbound,
  z.ZodTypeDef,
  AcceptPoliciesTaskSummaryDisabled
> = z.object({
  date: z.date().transform(v => v.toISOString()),
  reason: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptPoliciesTaskSummaryDisabled$ {
  /** @deprecated use `AcceptPoliciesTaskSummaryDisabled$inboundSchema` instead. */
  export const inboundSchema = AcceptPoliciesTaskSummaryDisabled$inboundSchema;
  /** @deprecated use `AcceptPoliciesTaskSummaryDisabled$outboundSchema` instead. */
  export const outboundSchema =
    AcceptPoliciesTaskSummaryDisabled$outboundSchema;
  /** @deprecated use `AcceptPoliciesTaskSummaryDisabled$Outbound` instead. */
  export type Outbound = AcceptPoliciesTaskSummaryDisabled$Outbound;
}

export function acceptPoliciesTaskSummaryDisabledToJSON(
  acceptPoliciesTaskSummaryDisabled: AcceptPoliciesTaskSummaryDisabled,
): string {
  return JSON.stringify(
    AcceptPoliciesTaskSummaryDisabled$outboundSchema.parse(
      acceptPoliciesTaskSummaryDisabled,
    ),
  );
}

export function acceptPoliciesTaskSummaryDisabledFromJSON(
  jsonString: string,
): SafeParseResult<AcceptPoliciesTaskSummaryDisabled, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptPoliciesTaskSummaryDisabled$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptPoliciesTaskSummaryDisabled' from JSON`,
  );
}

/** @internal */
export const UnacceptedPolicies$inboundSchema: z.ZodType<
  UnacceptedPolicies,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type UnacceptedPolicies$Outbound = {
  name: string;
};

/** @internal */
export const UnacceptedPolicies$outboundSchema: z.ZodType<
  UnacceptedPolicies$Outbound,
  z.ZodTypeDef,
  UnacceptedPolicies
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnacceptedPolicies$ {
  /** @deprecated use `UnacceptedPolicies$inboundSchema` instead. */
  export const inboundSchema = UnacceptedPolicies$inboundSchema;
  /** @deprecated use `UnacceptedPolicies$outboundSchema` instead. */
  export const outboundSchema = UnacceptedPolicies$outboundSchema;
  /** @deprecated use `UnacceptedPolicies$Outbound` instead. */
  export type Outbound = UnacceptedPolicies$Outbound;
}

export function unacceptedPoliciesToJSON(
  unacceptedPolicies: UnacceptedPolicies,
): string {
  return JSON.stringify(
    UnacceptedPolicies$outboundSchema.parse(unacceptedPolicies),
  );
}

export function unacceptedPoliciesFromJSON(
  jsonString: string,
): SafeParseResult<UnacceptedPolicies, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnacceptedPolicies$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnacceptedPolicies' from JSON`,
  );
}

/** @internal */
export const AcceptedPolicies$inboundSchema: z.ZodType<
  AcceptedPolicies,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type AcceptedPolicies$Outbound = {
  name: string;
};

/** @internal */
export const AcceptedPolicies$outboundSchema: z.ZodType<
  AcceptedPolicies$Outbound,
  z.ZodTypeDef,
  AcceptedPolicies
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptedPolicies$ {
  /** @deprecated use `AcceptedPolicies$inboundSchema` instead. */
  export const inboundSchema = AcceptedPolicies$inboundSchema;
  /** @deprecated use `AcceptedPolicies$outboundSchema` instead. */
  export const outboundSchema = AcceptedPolicies$outboundSchema;
  /** @deprecated use `AcceptedPolicies$Outbound` instead. */
  export type Outbound = AcceptedPolicies$Outbound;
}

export function acceptedPoliciesToJSON(
  acceptedPolicies: AcceptedPolicies,
): string {
  return JSON.stringify(
    AcceptedPolicies$outboundSchema.parse(acceptedPolicies),
  );
}

export function acceptedPoliciesFromJSON(
  jsonString: string,
): SafeParseResult<AcceptedPolicies, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptedPolicies$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptedPolicies' from JSON`,
  );
}

/** @internal */
export const AcceptPoliciesTaskSummary$inboundSchema: z.ZodType<
  AcceptPoliciesTaskSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  taskType: TaskTypeACCEPTPOLICIES$inboundSchema,
  status: TaskStatus$inboundSchema,
  dueDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  completionDate: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  disabled: z.nullable(
    z.lazy(() => AcceptPoliciesTaskSummaryDisabled$inboundSchema),
  ),
  unacceptedPolicies: z.array(z.lazy(() => UnacceptedPolicies$inboundSchema)),
  acceptedPolicies: z.array(z.lazy(() => AcceptedPolicies$inboundSchema)),
});

/** @internal */
export type AcceptPoliciesTaskSummary$Outbound = {
  taskType: string;
  status: string;
  dueDate: string | null;
  completionDate: string | null;
  disabled: AcceptPoliciesTaskSummaryDisabled$Outbound | null;
  unacceptedPolicies: Array<UnacceptedPolicies$Outbound>;
  acceptedPolicies: Array<AcceptedPolicies$Outbound>;
};

/** @internal */
export const AcceptPoliciesTaskSummary$outboundSchema: z.ZodType<
  AcceptPoliciesTaskSummary$Outbound,
  z.ZodTypeDef,
  AcceptPoliciesTaskSummary
> = z.object({
  taskType: TaskTypeACCEPTPOLICIES$outboundSchema,
  status: TaskStatus$outboundSchema,
  dueDate: z.nullable(z.date().transform(v => v.toISOString())),
  completionDate: z.nullable(z.date().transform(v => v.toISOString())),
  disabled: z.nullable(
    z.lazy(() => AcceptPoliciesTaskSummaryDisabled$outboundSchema),
  ),
  unacceptedPolicies: z.array(z.lazy(() => UnacceptedPolicies$outboundSchema)),
  acceptedPolicies: z.array(z.lazy(() => AcceptedPolicies$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptPoliciesTaskSummary$ {
  /** @deprecated use `AcceptPoliciesTaskSummary$inboundSchema` instead. */
  export const inboundSchema = AcceptPoliciesTaskSummary$inboundSchema;
  /** @deprecated use `AcceptPoliciesTaskSummary$outboundSchema` instead. */
  export const outboundSchema = AcceptPoliciesTaskSummary$outboundSchema;
  /** @deprecated use `AcceptPoliciesTaskSummary$Outbound` instead. */
  export type Outbound = AcceptPoliciesTaskSummary$Outbound;
}

export function acceptPoliciesTaskSummaryToJSON(
  acceptPoliciesTaskSummary: AcceptPoliciesTaskSummary,
): string {
  return JSON.stringify(
    AcceptPoliciesTaskSummary$outboundSchema.parse(acceptPoliciesTaskSummary),
  );
}

export function acceptPoliciesTaskSummaryFromJSON(
  jsonString: string,
): SafeParseResult<AcceptPoliciesTaskSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcceptPoliciesTaskSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptPoliciesTaskSummary' from JSON`,
  );
}
