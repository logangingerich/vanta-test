/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Audit = {
  /**
   * The unique identifier for the audit.
   */
  id: string;
  /**
   * The domain name of the customer organization being audited (e.g. vanta.com)
   */
  customerOrganizationName: string;
  /**
   * The human readable name of the customer organization being audited (e.g. Vanta)
   */
  customerDisplayName: string | null;
  /**
   * The uuid of the customer organization being audited
   */
  customerOrganizationId: string;
  /**
   * The start of the audit window. This is also when data collection for audit starts.
   */
  auditStartDate: Date;
  /**
   * The end of the audit window.
   */
  auditEndDate: Date;
  /**
   * Timestamp at which auditors gain access to the audit. Occurs before the audit window begins
   */
  earlyAccessStartsDate: Date | null;
  /**
   * The name of the framework for the audit
   */
  framework: string;
  /**
   * Emails of auditors with access to audit
   */
  allowAuditorEmails: Array<string>;
  /**
   * Set to true if all auditors in audit firm have access
   */
  allowAllAuditors: boolean;
  /**
   * Timestamp when the audit was deleted
   */
  deletionDate: Date | null;
  /**
   * Timestamp when the audit was created
   */
  creationDate: Date;
  /**
   * Timestamp when the audit was updated
   */
  modificationDate: Date | null;
  /**
   * Timestamp when the audit was marked completed, and report was uploaded
   */
  completionDate: Date | null;
};

/** @internal */
export const Audit$inboundSchema: z.ZodType<Audit, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    customerOrganizationName: z.string(),
    customerDisplayName: z.nullable(z.string()),
    customerOrganizationId: z.string(),
    auditStartDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    auditEndDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    earlyAccessStartsDate: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
    framework: z.string(),
    allowAuditorEmails: z.array(z.string()),
    allowAllAuditors: z.boolean(),
    deletionDate: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
    creationDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    modificationDate: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
    completionDate: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
  });

/** @internal */
export type Audit$Outbound = {
  id: string;
  customerOrganizationName: string;
  customerDisplayName: string | null;
  customerOrganizationId: string;
  auditStartDate: string;
  auditEndDate: string;
  earlyAccessStartsDate: string | null;
  framework: string;
  allowAuditorEmails: Array<string>;
  allowAllAuditors: boolean;
  deletionDate: string | null;
  creationDate: string;
  modificationDate: string | null;
  completionDate: string | null;
};

/** @internal */
export const Audit$outboundSchema: z.ZodType<
  Audit$Outbound,
  z.ZodTypeDef,
  Audit
> = z.object({
  id: z.string(),
  customerOrganizationName: z.string(),
  customerDisplayName: z.nullable(z.string()),
  customerOrganizationId: z.string(),
  auditStartDate: z.date().transform(v => v.toISOString()),
  auditEndDate: z.date().transform(v => v.toISOString()),
  earlyAccessStartsDate: z.nullable(z.date().transform(v => v.toISOString())),
  framework: z.string(),
  allowAuditorEmails: z.array(z.string()),
  allowAllAuditors: z.boolean(),
  deletionDate: z.nullable(z.date().transform(v => v.toISOString())),
  creationDate: z.date().transform(v => v.toISOString()),
  modificationDate: z.nullable(z.date().transform(v => v.toISOString())),
  completionDate: z.nullable(z.date().transform(v => v.toISOString())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Audit$ {
  /** @deprecated use `Audit$inboundSchema` instead. */
  export const inboundSchema = Audit$inboundSchema;
  /** @deprecated use `Audit$outboundSchema` instead. */
  export const outboundSchema = Audit$outboundSchema;
  /** @deprecated use `Audit$Outbound` instead. */
  export type Outbound = Audit$Outbound;
}

export function auditToJSON(audit: Audit): string {
  return JSON.stringify(Audit$outboundSchema.parse(audit));
}

export function auditFromJSON(
  jsonString: string,
): SafeParseResult<Audit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Audit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Audit' from JSON`,
  );
}
