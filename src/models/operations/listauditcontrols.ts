/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAuditControlsRequest = {
  auditId: string;
  pageSize?: number | undefined;
  pageCursor?: string | undefined;
};

/** @internal */
export const ListAuditControlsRequest$inboundSchema: z.ZodType<
  ListAuditControlsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  auditId: z.string(),
  pageSize: z.number().int().default(10),
  pageCursor: z.string().optional(),
});

/** @internal */
export type ListAuditControlsRequest$Outbound = {
  auditId: string;
  pageSize: number;
  pageCursor?: string | undefined;
};

/** @internal */
export const ListAuditControlsRequest$outboundSchema: z.ZodType<
  ListAuditControlsRequest$Outbound,
  z.ZodTypeDef,
  ListAuditControlsRequest
> = z.object({
  auditId: z.string(),
  pageSize: z.number().int().default(10),
  pageCursor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAuditControlsRequest$ {
  /** @deprecated use `ListAuditControlsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAuditControlsRequest$inboundSchema;
  /** @deprecated use `ListAuditControlsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAuditControlsRequest$outboundSchema;
  /** @deprecated use `ListAuditControlsRequest$Outbound` instead. */
  export type Outbound = ListAuditControlsRequest$Outbound;
}

export function listAuditControlsRequestToJSON(
  listAuditControlsRequest: ListAuditControlsRequest,
): string {
  return JSON.stringify(
    ListAuditControlsRequest$outboundSchema.parse(listAuditControlsRequest),
  );
}

export function listAuditControlsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAuditControlsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAuditControlsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAuditControlsRequest' from JSON`,
  );
}
