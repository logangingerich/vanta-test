/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListVulnerabilitiesRequest = {
  auditId: string;
  /**
   * Filter vulnerabilities by search query
   */
  query?: string | undefined;
  pageSize?: number | undefined;
  pageCursor?: string | undefined;
  /**
   * Filter vulnerabilities by deactivation status.
   */
  isDeactivated?: boolean | undefined;
  /**
   * Filter vulnerabilities based on a specific external ID.
   */
  externalVulnerabilityId?: string | undefined;
  /**
   * Filter vulnerabilities that have an available fix.
   */
  isFixAvailable?: boolean | undefined;
  /**
   * Filter vulnerabilities that are from a specific package.
   */
  packageIdentifier?: string | undefined;
  /**
   * Filter vulnerabilities with a fix due after a specific timestamp
   */
  slaDeadlineAfterDate?: Date | undefined;
  /**
   * Filter vulnerabilities with a fix due before a specific timestamp
   */
  slaDeadlineBeforeDate?: Date | undefined;
  /**
   * Filter vulnerabilities by severity.
   *
   * @remarks
   * Possible values: CRITICAL, HIGH, MEDIUM, LOW.
   */
  severity?: components.VulnerabilitySeverity | undefined;
  /**
   * Filter vulnerabilities by the vulnerability scanner that detected them.
   */
  integrationId?: string | undefined;
  /**
   * Filter vulnerabilities without an SLA due date.
   */
  includeVulnerabilitiesWithoutSlas?: boolean | undefined;
  /**
   * Filter vulnerabilities by a specific asset ID.
   */
  vulnerableAssetId?: string | undefined;
};

/** @internal */
export const ListVulnerabilitiesRequest$inboundSchema: z.ZodType<
  ListVulnerabilitiesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  auditId: z.string(),
  query: z.string().optional(),
  pageSize: z.number().int().default(10),
  pageCursor: z.string().optional(),
  isDeactivated: z.boolean().optional(),
  externalVulnerabilityId: z.string().optional(),
  isFixAvailable: z.boolean().optional(),
  packageIdentifier: z.string().optional(),
  slaDeadlineAfterDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  slaDeadlineBeforeDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  severity: components.VulnerabilitySeverity$inboundSchema.optional(),
  integrationId: z.string().optional(),
  includeVulnerabilitiesWithoutSlas: z.boolean().optional(),
  vulnerableAssetId: z.string().optional(),
});

/** @internal */
export type ListVulnerabilitiesRequest$Outbound = {
  auditId: string;
  query?: string | undefined;
  pageSize: number;
  pageCursor?: string | undefined;
  isDeactivated?: boolean | undefined;
  externalVulnerabilityId?: string | undefined;
  isFixAvailable?: boolean | undefined;
  packageIdentifier?: string | undefined;
  slaDeadlineAfterDate?: string | undefined;
  slaDeadlineBeforeDate?: string | undefined;
  severity?: string | undefined;
  integrationId?: string | undefined;
  includeVulnerabilitiesWithoutSlas?: boolean | undefined;
  vulnerableAssetId?: string | undefined;
};

/** @internal */
export const ListVulnerabilitiesRequest$outboundSchema: z.ZodType<
  ListVulnerabilitiesRequest$Outbound,
  z.ZodTypeDef,
  ListVulnerabilitiesRequest
> = z.object({
  auditId: z.string(),
  query: z.string().optional(),
  pageSize: z.number().int().default(10),
  pageCursor: z.string().optional(),
  isDeactivated: z.boolean().optional(),
  externalVulnerabilityId: z.string().optional(),
  isFixAvailable: z.boolean().optional(),
  packageIdentifier: z.string().optional(),
  slaDeadlineAfterDate: z.date().transform(v => v.toISOString()).optional(),
  slaDeadlineBeforeDate: z.date().transform(v => v.toISOString()).optional(),
  severity: components.VulnerabilitySeverity$outboundSchema.optional(),
  integrationId: z.string().optional(),
  includeVulnerabilitiesWithoutSlas: z.boolean().optional(),
  vulnerableAssetId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVulnerabilitiesRequest$ {
  /** @deprecated use `ListVulnerabilitiesRequest$inboundSchema` instead. */
  export const inboundSchema = ListVulnerabilitiesRequest$inboundSchema;
  /** @deprecated use `ListVulnerabilitiesRequest$outboundSchema` instead. */
  export const outboundSchema = ListVulnerabilitiesRequest$outboundSchema;
  /** @deprecated use `ListVulnerabilitiesRequest$Outbound` instead. */
  export type Outbound = ListVulnerabilitiesRequest$Outbound;
}

export function listVulnerabilitiesRequestToJSON(
  listVulnerabilitiesRequest: ListVulnerabilitiesRequest,
): string {
  return JSON.stringify(
    ListVulnerabilitiesRequest$outboundSchema.parse(listVulnerabilitiesRequest),
  );
}

export function listVulnerabilitiesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListVulnerabilitiesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListVulnerabilitiesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListVulnerabilitiesRequest' from JSON`,
  );
}
