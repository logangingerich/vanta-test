/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListVendorsRequest = {
  auditId: string;
  pageSize?: number | undefined;
  pageCursor?: string | undefined;
};

/** @internal */
export const ListVendorsRequest$inboundSchema: z.ZodType<
  ListVendorsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  auditId: z.string(),
  pageSize: z.number().int().default(10),
  pageCursor: z.string().optional(),
});

/** @internal */
export type ListVendorsRequest$Outbound = {
  auditId: string;
  pageSize: number;
  pageCursor?: string | undefined;
};

/** @internal */
export const ListVendorsRequest$outboundSchema: z.ZodType<
  ListVendorsRequest$Outbound,
  z.ZodTypeDef,
  ListVendorsRequest
> = z.object({
  auditId: z.string(),
  pageSize: z.number().int().default(10),
  pageCursor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVendorsRequest$ {
  /** @deprecated use `ListVendorsRequest$inboundSchema` instead. */
  export const inboundSchema = ListVendorsRequest$inboundSchema;
  /** @deprecated use `ListVendorsRequest$outboundSchema` instead. */
  export const outboundSchema = ListVendorsRequest$outboundSchema;
  /** @deprecated use `ListVendorsRequest$Outbound` instead. */
  export type Outbound = ListVendorsRequest$Outbound;
}

export function listVendorsRequestToJSON(
  listVendorsRequest: ListVendorsRequest,
): string {
  return JSON.stringify(
    ListVendorsRequest$outboundSchema.parse(listVendorsRequest),
  );
}

export function listVendorsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListVendorsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListVendorsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListVendorsRequest' from JSON`,
  );
}
