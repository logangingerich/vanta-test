/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListVulnerabilityRemediationsInAuditScopeRequest = {
  auditId: string;
  pageSize?: number | undefined;
  pageCursor?: string | undefined;
  /**
   * Filter vulnerability remediations based on a specific scanner integration.
   */
  integrationId?: string | undefined;
  /**
   * Filter vulnerability remediations by severity.
   *
   * @remarks
   * Possible values: CRITICAL, HIGH, MEDIUM, LOW.
   */
  severity?: components.VulnerabilitySeverity | undefined;
  /**
   * Filter vulnerability remediations by remediation status.
   */
  isRemediatedOnTime?: boolean | undefined;
  /**
   * Filter vulnerability remediations that occurred after a specific timestamp.
   */
  remediatedAfterDate?: Date | undefined;
  /**
   * Filter vulnerability remediations that occurred before a specific timestamp.
   */
  remediatedBeforeDate?: Date | undefined;
};

/** @internal */
export const ListVulnerabilityRemediationsInAuditScopeRequest$inboundSchema:
  z.ZodType<
    ListVulnerabilityRemediationsInAuditScopeRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    auditId: z.string(),
    pageSize: z.number().int().default(10),
    pageCursor: z.string().optional(),
    integrationId: z.string().optional(),
    severity: components.VulnerabilitySeverity$inboundSchema.optional(),
    isRemediatedOnTime: z.boolean().optional(),
    remediatedAfterDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    remediatedBeforeDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
  });

/** @internal */
export type ListVulnerabilityRemediationsInAuditScopeRequest$Outbound = {
  auditId: string;
  pageSize: number;
  pageCursor?: string | undefined;
  integrationId?: string | undefined;
  severity?: string | undefined;
  isRemediatedOnTime?: boolean | undefined;
  remediatedAfterDate?: string | undefined;
  remediatedBeforeDate?: string | undefined;
};

/** @internal */
export const ListVulnerabilityRemediationsInAuditScopeRequest$outboundSchema:
  z.ZodType<
    ListVulnerabilityRemediationsInAuditScopeRequest$Outbound,
    z.ZodTypeDef,
    ListVulnerabilityRemediationsInAuditScopeRequest
  > = z.object({
    auditId: z.string(),
    pageSize: z.number().int().default(10),
    pageCursor: z.string().optional(),
    integrationId: z.string().optional(),
    severity: components.VulnerabilitySeverity$outboundSchema.optional(),
    isRemediatedOnTime: z.boolean().optional(),
    remediatedAfterDate: z.date().transform(v => v.toISOString()).optional(),
    remediatedBeforeDate: z.date().transform(v => v.toISOString()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVulnerabilityRemediationsInAuditScopeRequest$ {
  /** @deprecated use `ListVulnerabilityRemediationsInAuditScopeRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListVulnerabilityRemediationsInAuditScopeRequest$inboundSchema;
  /** @deprecated use `ListVulnerabilityRemediationsInAuditScopeRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListVulnerabilityRemediationsInAuditScopeRequest$outboundSchema;
  /** @deprecated use `ListVulnerabilityRemediationsInAuditScopeRequest$Outbound` instead. */
  export type Outbound =
    ListVulnerabilityRemediationsInAuditScopeRequest$Outbound;
}

export function listVulnerabilityRemediationsInAuditScopeRequestToJSON(
  listVulnerabilityRemediationsInAuditScopeRequest:
    ListVulnerabilityRemediationsInAuditScopeRequest,
): string {
  return JSON.stringify(
    ListVulnerabilityRemediationsInAuditScopeRequest$outboundSchema.parse(
      listVulnerabilityRemediationsInAuditScopeRequest,
    ),
  );
}

export function listVulnerabilityRemediationsInAuditScopeRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ListVulnerabilityRemediationsInAuditScopeRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListVulnerabilityRemediationsInAuditScopeRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListVulnerabilityRemediationsInAuditScopeRequest' from JSON`,
  );
}
