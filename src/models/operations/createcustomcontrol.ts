/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCustomControlRequest = {
  auditId: string;
  createCustomControlInput: components.CreateCustomControlInput;
};

/** @internal */
export const CreateCustomControlRequest$inboundSchema: z.ZodType<
  CreateCustomControlRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  auditId: z.string(),
  CreateCustomControlInput: components.CreateCustomControlInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateCustomControlInput": "createCustomControlInput",
  });
});

/** @internal */
export type CreateCustomControlRequest$Outbound = {
  auditId: string;
  CreateCustomControlInput: components.CreateCustomControlInput$Outbound;
};

/** @internal */
export const CreateCustomControlRequest$outboundSchema: z.ZodType<
  CreateCustomControlRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomControlRequest
> = z.object({
  auditId: z.string(),
  createCustomControlInput: components.CreateCustomControlInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createCustomControlInput: "CreateCustomControlInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomControlRequest$ {
  /** @deprecated use `CreateCustomControlRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCustomControlRequest$inboundSchema;
  /** @deprecated use `CreateCustomControlRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCustomControlRequest$outboundSchema;
  /** @deprecated use `CreateCustomControlRequest$Outbound` instead. */
  export type Outbound = CreateCustomControlRequest$Outbound;
}

export function createCustomControlRequestToJSON(
  createCustomControlRequest: CreateCustomControlRequest,
): string {
  return JSON.stringify(
    CreateCustomControlRequest$outboundSchema.parse(createCustomControlRequest),
  );
}

export function createCustomControlRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomControlRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomControlRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomControlRequest' from JSON`,
  );
}
