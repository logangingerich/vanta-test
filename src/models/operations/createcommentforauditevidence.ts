/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCommentForAuditEvidenceRequest = {
  auditId: string;
  auditEvidenceId: string;
  addCommentInput: components.AddCommentInput;
};

/** @internal */
export const CreateCommentForAuditEvidenceRequest$inboundSchema: z.ZodType<
  CreateCommentForAuditEvidenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  auditId: z.string(),
  auditEvidenceId: z.string(),
  AddCommentInput: components.AddCommentInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "AddCommentInput": "addCommentInput",
  });
});

/** @internal */
export type CreateCommentForAuditEvidenceRequest$Outbound = {
  auditId: string;
  auditEvidenceId: string;
  AddCommentInput: components.AddCommentInput$Outbound;
};

/** @internal */
export const CreateCommentForAuditEvidenceRequest$outboundSchema: z.ZodType<
  CreateCommentForAuditEvidenceRequest$Outbound,
  z.ZodTypeDef,
  CreateCommentForAuditEvidenceRequest
> = z.object({
  auditId: z.string(),
  auditEvidenceId: z.string(),
  addCommentInput: components.AddCommentInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    addCommentInput: "AddCommentInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCommentForAuditEvidenceRequest$ {
  /** @deprecated use `CreateCommentForAuditEvidenceRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateCommentForAuditEvidenceRequest$inboundSchema;
  /** @deprecated use `CreateCommentForAuditEvidenceRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateCommentForAuditEvidenceRequest$outboundSchema;
  /** @deprecated use `CreateCommentForAuditEvidenceRequest$Outbound` instead. */
  export type Outbound = CreateCommentForAuditEvidenceRequest$Outbound;
}

export function createCommentForAuditEvidenceRequestToJSON(
  createCommentForAuditEvidenceRequest: CreateCommentForAuditEvidenceRequest,
): string {
  return JSON.stringify(
    CreateCommentForAuditEvidenceRequest$outboundSchema.parse(
      createCommentForAuditEvidenceRequest,
    ),
  );
}

export function createCommentForAuditEvidenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCommentForAuditEvidenceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCommentForAuditEvidenceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCommentForAuditEvidenceRequest' from JSON`,
  );
}
