/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetVulnerableAssetsRequest = {
  auditId: string;
  /**
   * Filter vulnerable assets by search query.
   */
  query?: string | undefined;
  pageSize?: number | undefined;
  pageCursor?: string | undefined;
  /**
   * Filter vulnerable assets by specific vulnerability scanner.
   */
  integrationId?: string | undefined;
  /**
   * Filter vulnerable assets by asset type.
   *
   * @remarks
   * Possible values: CODE_REPOSITORY, CONTAINER_REPOSITORY, CONTAINER_REPOSITORY_IMAGE, MANIFEST_FILE, SERVER, SERVERLESS_FUNCTION, WORKSTATION.
   */
  assetType?: components.VulnerableAssetType | undefined;
  /**
   * Filter vulnerable assets by...
   */
  assetExternalAccountId?: string | undefined;
};

/** @internal */
export const GetVulnerableAssetsRequest$inboundSchema: z.ZodType<
  GetVulnerableAssetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  auditId: z.string(),
  query: z.string().optional(),
  pageSize: z.number().int().default(10),
  pageCursor: z.string().optional(),
  integrationId: z.string().optional(),
  assetType: components.VulnerableAssetType$inboundSchema.optional(),
  assetExternalAccountId: z.string().optional(),
});

/** @internal */
export type GetVulnerableAssetsRequest$Outbound = {
  auditId: string;
  query?: string | undefined;
  pageSize: number;
  pageCursor?: string | undefined;
  integrationId?: string | undefined;
  assetType?: string | undefined;
  assetExternalAccountId?: string | undefined;
};

/** @internal */
export const GetVulnerableAssetsRequest$outboundSchema: z.ZodType<
  GetVulnerableAssetsRequest$Outbound,
  z.ZodTypeDef,
  GetVulnerableAssetsRequest
> = z.object({
  auditId: z.string(),
  query: z.string().optional(),
  pageSize: z.number().int().default(10),
  pageCursor: z.string().optional(),
  integrationId: z.string().optional(),
  assetType: components.VulnerableAssetType$outboundSchema.optional(),
  assetExternalAccountId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVulnerableAssetsRequest$ {
  /** @deprecated use `GetVulnerableAssetsRequest$inboundSchema` instead. */
  export const inboundSchema = GetVulnerableAssetsRequest$inboundSchema;
  /** @deprecated use `GetVulnerableAssetsRequest$outboundSchema` instead. */
  export const outboundSchema = GetVulnerableAssetsRequest$outboundSchema;
  /** @deprecated use `GetVulnerableAssetsRequest$Outbound` instead. */
  export type Outbound = GetVulnerableAssetsRequest$Outbound;
}

export function getVulnerableAssetsRequestToJSON(
  getVulnerableAssetsRequest: GetVulnerableAssetsRequest,
): string {
  return JSON.stringify(
    GetVulnerableAssetsRequest$outboundSchema.parse(getVulnerableAssetsRequest),
  );
}

export function getVulnerableAssetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVulnerableAssetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVulnerableAssetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVulnerableAssetsRequest' from JSON`,
  );
}
