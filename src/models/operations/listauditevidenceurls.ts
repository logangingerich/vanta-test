/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAuditEvidenceUrlsRequest = {
  auditId: string;
  auditEvidenceId: string;
  pageSize?: number | undefined;
  pageCursor?: string | undefined;
};

/** @internal */
export const ListAuditEvidenceUrlsRequest$inboundSchema: z.ZodType<
  ListAuditEvidenceUrlsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  auditId: z.string(),
  auditEvidenceId: z.string(),
  pageSize: z.number().int().default(10),
  pageCursor: z.string().optional(),
});

/** @internal */
export type ListAuditEvidenceUrlsRequest$Outbound = {
  auditId: string;
  auditEvidenceId: string;
  pageSize: number;
  pageCursor?: string | undefined;
};

/** @internal */
export const ListAuditEvidenceUrlsRequest$outboundSchema: z.ZodType<
  ListAuditEvidenceUrlsRequest$Outbound,
  z.ZodTypeDef,
  ListAuditEvidenceUrlsRequest
> = z.object({
  auditId: z.string(),
  auditEvidenceId: z.string(),
  pageSize: z.number().int().default(10),
  pageCursor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAuditEvidenceUrlsRequest$ {
  /** @deprecated use `ListAuditEvidenceUrlsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAuditEvidenceUrlsRequest$inboundSchema;
  /** @deprecated use `ListAuditEvidenceUrlsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAuditEvidenceUrlsRequest$outboundSchema;
  /** @deprecated use `ListAuditEvidenceUrlsRequest$Outbound` instead. */
  export type Outbound = ListAuditEvidenceUrlsRequest$Outbound;
}

export function listAuditEvidenceUrlsRequestToJSON(
  listAuditEvidenceUrlsRequest: ListAuditEvidenceUrlsRequest,
): string {
  return JSON.stringify(
    ListAuditEvidenceUrlsRequest$outboundSchema.parse(
      listAuditEvidenceUrlsRequest,
    ),
  );
}

export function listAuditEvidenceUrlsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAuditEvidenceUrlsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAuditEvidenceUrlsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAuditEvidenceUrlsRequest' from JSON`,
  );
}
